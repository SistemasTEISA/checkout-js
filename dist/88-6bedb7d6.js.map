{"version":3,"file":"88-6bedb7d6.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorAU.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorCA.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./packages/core/src/app/ui/popover/Popover.tsx","webpack://checkout/./packages/core/src/app/ui/popover/PopoverList.tsx","webpack://checkout/./packages/core/src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./packages/core/src/app/address/AddressForm.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./packages/core/src/app/payment/getPreselectedPayment.ts","webpack://checkout/./packages/core/src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./packages/core/src/app/address/AddressSelectButton.tsx","webpack://checkout/./packages/core/src/app/address/AddressSelect.tsx","webpack://checkout/./packages/core/src/app/address/SingleLineStaticAddress.tsx","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/core/src/app/orderComments/OrderComments.tsx","webpack://checkout/./packages/core/src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./packages/core/src/app/address/isValidCustomerAddress.ts","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts","webpack://checkout/./packages/core/src/app/address/isEqualAddress.ts"],"sourcesContent":["import { AddressKeyMap } from './address';\r\n\r\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\r\n    address1: 'addressLine1',\r\n    address2: 'addressLine2',\r\n    postalCode: 'postCode',\r\n    stateOrProvince: 'province',\r\n    stateOrProvinceCode: 'provinceCode',\r\n};\r\n\r\nexport function getAddressFormFieldLegacyName(name: string): string {\r\n    return ADDRESS_FIELD_IDS[name] || name;\r\n}\r\n\r\nexport function getAddressFormFieldInputId(name: string): string {\r\n    return `${getAddressFormFieldLegacyName(name)}Input`;\r\n}\r\n\r\nexport function getAddressFormFieldLabelId(name: string): string {\r\n    return `${getAddressFormFieldLegacyName(name)}Label`;\r\n}\r\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\r\n\r\nexport default class AddressSelector {\r\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\r\n    protected _name: string;\r\n\r\n    constructor(googlePlace: google.maps.places.PlaceResult) {\r\n        const { address_components, name } = googlePlace;\r\n\r\n        this._name = name ?? '';\r\n        this._address = address_components;\r\n    }\r\n\r\n    getState(): string {\r\n        return this._get('administrative_area_level_1', 'short_name');\r\n    }\r\n\r\n    getStreet(): string {\r\n        return this._name;\r\n    }\r\n\r\n    getStreet2(): string {\r\n        if (this.getCountry() === 'NZ') {\r\n            return this._get('sublocality', 'short_name');\r\n        }\r\n\r\n        return this._get('subpremise', 'short_name');\r\n    }\r\n\r\n    getCity(): string {\r\n        return (\r\n            this._get('postal_town', 'long_name') ||\r\n            this._get('locality', 'long_name') ||\r\n            this._get('neighborhood', 'short_name')\r\n        );\r\n    }\r\n\r\n    getCountry(): string {\r\n        return this._get('country', 'short_name');\r\n    }\r\n\r\n    getPostCode(): string {\r\n        return this._get('postal_code', 'short_name');\r\n    }\r\n\r\n    protected _get(\r\n        type: GoogleAddressFieldType,\r\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>,\r\n    ): string {\r\n        const element =\r\n            this._address && this._address.find((field) => field.types.includes(type));\r\n\r\n        if (element) {\r\n            return element[access];\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n","import AddressSelector from './AddressSelector';\r\n\r\nexport default class AddressSelectorAU extends AddressSelector {\r\n    getStreet(): string {\r\n        return `${this._get('subpremise', 'long_name')} ${this._get('street_number', 'long_name')} ${this._get('route', 'long_name')}`;\r\n    }\r\n\r\n    getStreet2(): string {\r\n        return '';\r\n    }\r\n}\r\n","import AddressSelector from './AddressSelector';\r\n\r\nexport default class AddressSelectorCA extends AddressSelector {\r\n    getCity(): string {\r\n        return this._get('sublocality_level_1', 'long_name') || this._get('locality', 'long_name');\r\n    }\r\n}\r\n","import AddressSelector from './AddressSelector';\r\n\r\nexport default class AddressSelectorUK extends AddressSelector {\r\n    getState(): string {\r\n        return '';\r\n    }\r\n\r\n    getStreet2(): string {\r\n        return this._get('locality', 'long_name');\r\n    }\r\n\r\n    getPostCode(): string {\r\n        return '';\r\n    }\r\n}\r\n","import AddressSelector from './AddressSelector';\r\nimport AddressSelectorAU from './AddressSelectorAU';\r\nimport AddressSelectorCA from './AddressSelectorCA';\r\nimport AddressSelectorUK from './AddressSelectorUk';\r\n\r\nexport default class AddressSelectorFactory {\r\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\r\n        const countryComponent = autocompleteData.address_components?.find(\r\n            component => component.types.includes('country'));\r\n        const countryShortName = countryComponent?.short_name || '';\r\n\r\n        switch (countryShortName) {\r\n            case 'GB':\r\n                return new AddressSelectorUK(autocompleteData);\r\n\r\n            case 'CA':\r\n                return new AddressSelectorCA(autocompleteData);\r\n            \r\n            case 'AU':\r\n                return new AddressSelectorAU(autocompleteData);\r\n\r\n            default:\r\n                return new AddressSelector(autocompleteData);\r\n        }\r\n    }\r\n}\r\n","import React, { FunctionComponent, ReactNode } from 'react';\r\n\r\nimport './Popover.scss';\r\n\r\nexport interface PopoverProps {\r\n    children?: ReactNode;\r\n}\r\n\r\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\r\n    return <div className=\"popover\">{children}</div>;\r\n};\r\n\r\nexport default Popover;\r\n","import React, { FunctionComponent, memo } from 'react';\r\n\r\nimport './PopoverList.scss';\r\n\r\nexport interface PopoverListProps {\r\n    menuProps?: any;\r\n    highlightedIndex?: number;\r\n    getItemProps?: any;\r\n    items: PopoverListItem[];\r\n    testId?: string;\r\n}\r\n\r\nexport interface PopoverListItem {\r\n    id: string;\r\n    content: React.ReactChild[] | React.ReactChild;\r\n}\r\n\r\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\r\n    highlightedIndex = -1,\r\n    testId,\r\n     \r\n    getItemProps = (props: any) => props,\r\n    menuProps = {},\r\n    items,\r\n}) => {\r\n    if (!items.length) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <ul className=\"popoverList\" data-test={testId} {...menuProps}>\r\n            {items.map((item, index) => (\r\n                <li\r\n                    className={getItemClassName(highlightedIndex, index)}\r\n                    data-test={testId && `${testId}-item`}\r\n                     \r\n                    {...getItemProps({\r\n                        key: item.id,\r\n                        index,\r\n                        item,\r\n                    })}\r\n                    key={index}\r\n                >\r\n                    {item.content}\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nfunction getItemClassName(highlightedIndex: number, index: number): string {\r\n    const classes = ['popoverList-item'];\r\n\r\n    if (highlightedIndex === index) {\r\n        classes.push('is-active');\r\n    }\r\n\r\n    return classes.join(' ');\r\n}\r\n\r\nexport default memo(PopoverList);\r\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\r\nimport { includes, isNumber, noop } from 'lodash';\r\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\r\n\r\nimport { StyleContext } from '@bigcommerce/checkout/payment-integration-api';\r\n\r\nimport { Label } from '../form';\r\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\r\n\r\nimport AutocompleteItem from './autocomplete-item';\r\n\r\nexport interface AutocompleteProps {\r\n    initialValue?: string;\r\n    initialHighlightedIndex?: number;\r\n    defaultHighlightedIndex?: number;\r\n    children?: ReactNode;\r\n    items: AutocompleteItem[];\r\n    inputProps?: any;\r\n    listTestId?: string;\r\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onSelect?(item: AutocompleteItem | null): void;\r\n    onChange?(value: string, isOpen: boolean): void;\r\n}\r\n\r\nclass Autocomplete extends PureComponent<AutocompleteProps> {\r\n    static contextType = StyleContext;\r\n    declare context: React.ContextType<typeof StyleContext>;\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            inputProps,\r\n            initialValue,\r\n            initialHighlightedIndex,\r\n            defaultHighlightedIndex,\r\n            items,\r\n            children,\r\n            onSelect,\r\n            listTestId,\r\n        } = this.props;\r\n\r\n        if (!this.context) {\r\n            throw Error('Need to wrap in style context');\r\n        }\r\n\r\n        const { newFontStyle } = this.context;\r\n\r\n        return (\r\n            <Downshift\r\n                defaultHighlightedIndex={defaultHighlightedIndex}\r\n                initialHighlightedIndex={initialHighlightedIndex}\r\n                initialInputValue={initialValue}\r\n                itemToString={this.itemToString}\r\n                labelId={\r\n                    inputProps && inputProps['aria-labelledby']\r\n                        ? inputProps['aria-labelledby']\r\n                        : null\r\n                }\r\n                onChange={onSelect}\r\n                onStateChange={this.handleStateChange}\r\n                stateReducer={this.stateReducer}\r\n            >\r\n                {({ isOpen, getInputProps, getMenuProps, getItemProps, highlightedIndex }) => {\r\n                    const validInputProps = { ...getInputProps({ value: initialValue }), ...inputProps };\r\n\r\n                    delete validInputProps.labelText;\r\n\r\n                    return (\r\n                        <div>\r\n                            <input {...validInputProps} />\r\n                            {inputProps && includes(inputProps.className, 'floating') && (\r\n                                <Label\r\n                                    additionalClassName={newFontStyle ? 'floating-form-field-label' : ''}\r\n                                    htmlFor={inputProps.id}\r\n                                    id={inputProps['aria-labelledby']}\r\n                                    isFloatingLabelEnabled={true}\r\n                                >\r\n                                    {inputProps.labelText}\r\n                                </Label>\r\n                            )}\r\n                            {isOpen && !!items.length && (\r\n                                <Popover>\r\n                                    <PopoverList\r\n                                        getItemProps={getItemProps}\r\n                                        highlightedIndex={\r\n                                            isNumber(highlightedIndex) ? highlightedIndex : -1\r\n                                        }\r\n                                        items={items.map((item) => this.toPopoverItem(item))}\r\n                                        menuProps={getMenuProps()}\r\n                                        testId={listTestId}\r\n                                    />\r\n                                    {children}\r\n                                </Popover>\r\n                            )}\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Downshift>\r\n        );\r\n    }\r\n\r\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\r\n        return {\r\n            ...item,\r\n            content: this.highlightItem(item),\r\n        };\r\n    }\r\n\r\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\r\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\r\n            return item.label;\r\n        }\r\n\r\n        let lastIndex = 0;\r\n        let key = 0;\r\n\r\n        return item.highlightedSlices.reduce((node, slice, i) => {\r\n            const { label } = item;\r\n            const { offset, length } = slice;\r\n            const notHighlightedLength = offset - lastIndex;\r\n\r\n            if (notHighlightedLength) {\r\n                node.push(\r\n                    <Fragment key={key}>{label.substr(lastIndex, notHighlightedLength)}</Fragment>,\r\n                );\r\n                key += 1;\r\n            }\r\n\r\n            lastIndex = offset + length;\r\n\r\n            node.push(<strong key={key}>{label.substr(offset, length)}</strong>);\r\n            key += 1;\r\n\r\n            if (i === (item.highlightedSlices || []).length - 1) {\r\n                node.push(<Fragment key={key}>{label.substr(lastIndex)}</Fragment>);\r\n                key += 1;\r\n            }\r\n\r\n            return node;\r\n            // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\r\n        }, [] as ReactChild[]);\r\n    }\r\n\r\n    private itemToString(item?: AutocompleteItem | null): string {\r\n        return (item && item.value) || '';\r\n    }\r\n\r\n    private stateReducer: (\r\n        state: DownshiftState<AutocompleteItem>,\r\n        changes: StateChangeOptions<AutocompleteItem>,\r\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\r\n        const { onChange } = this.props;\r\n\r\n        switch (changes.type) {\r\n            case Downshift.stateChangeTypes.blurInput:\r\n            case Downshift.stateChangeTypes.blurButton:\r\n            case Downshift.stateChangeTypes.mouseUp:\r\n            case Downshift.stateChangeTypes.touchEnd:\r\n                return {\r\n                    ...changes,\r\n                    inputValue: state.inputValue,\r\n                };\r\n\r\n            case Downshift.stateChangeTypes.changeInput:\r\n                if (changes.inputValue !== state.inputValue && onChange) {\r\n                    onChange(changes.inputValue || '', state.isOpen);\r\n                }\r\n\r\n                return changes;\r\n\r\n            case Downshift.stateChangeTypes.keyDownEnter:\r\n                return changes;\r\n\r\n            default:\r\n                return changes;\r\n        }\r\n    };\r\n\r\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<AutocompleteItem>) => {\r\n        const { onToggleOpen = noop } = this.props;\r\n\r\n        if (isOpen !== undefined) {\r\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\r\n        }\r\n    };\r\n}\r\n\r\nexport default Autocomplete;\r\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\r\n\r\nexport default class GoogleAutocompleteScriptLoader {\r\n    private _scriptLoader: ScriptLoader;\r\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\r\n\r\n    constructor() {\r\n        this._scriptLoader = getScriptLoader();\r\n    }\r\n\r\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\r\n        if (this._googleAutoComplete) {\r\n            return this._googleAutoComplete;\r\n        }\r\n\r\n        this._googleAutoComplete = new Promise((resolve, reject) => {\r\n            const callbackName = 'initAutoComplete';\r\n            const params = [\r\n                'language=en',\r\n                `key=${apiKey}`,\r\n                'libraries=places',\r\n                `callback=${callbackName}`,\r\n            ].join('&');\r\n\r\n            (window as GoogleCallbackWindow)[callbackName] = () => {\r\n                if (isAutocompleteWindow(window)) {\r\n                    resolve(window.google.maps);\r\n                }\r\n\r\n                reject(new Error('Failed to initialize Google Maps Autocomplete SDK.'));\r\n            };\r\n\r\n            this._scriptLoader\r\n                .loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\r\n                .catch((e) => {\r\n                    this._googleAutoComplete = undefined;\r\n                    throw e;\r\n                });\r\n        });\r\n\r\n        return this._googleAutoComplete;\r\n    }\r\n}\r\n\r\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\r\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\r\n\r\n    return Boolean(\r\n        autocompleteWindow.google &&\r\n            autocompleteWindow.google.maps &&\r\n            autocompleteWindow.google.maps.places,\r\n    );\r\n}\r\n\r\nexport interface GoogleCallbackWindow extends Window {\r\n    initAutoComplete?(): void;\r\n}\r\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\r\n\r\nlet instance: GoogleAutocompleteScriptLoader;\r\n\r\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\r\n    if (!instance) {\r\n        instance = new GoogleAutocompleteScriptLoader();\r\n    }\r\n\r\n    return instance;\r\n}\r\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\r\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\r\n\r\nexport default class GoogleAutocompleteService {\r\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\r\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\r\n\r\n    constructor(\r\n        private _apiKey: string,\r\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader(),\r\n    ) {}\r\n\r\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\r\n        if (!this._autocompletePromise) {\r\n            this._autocompletePromise = this._scriptLoader\r\n                .loadMapsSdk(this._apiKey)\r\n                .then((googleMapsSdk) => {\r\n                    if (!googleMapsSdk.places.AutocompleteService) {\r\n                        throw new Error('`AutocompleteService` is undefined');\r\n                    }\r\n\r\n                    return new googleMapsSdk.places.AutocompleteService();\r\n                });\r\n        }\r\n\r\n        return this._autocompletePromise;\r\n    }\r\n\r\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\r\n        const node = document.createElement('div');\r\n\r\n        if (!this._placesPromise) {\r\n            this._placesPromise = this._scriptLoader\r\n                .loadMapsSdk(this._apiKey)\r\n                .then((googleMapsSdk) => {\r\n                    if (!googleMapsSdk.places.PlacesService) {\r\n                        throw new Error('`PlacesService` is undefined');\r\n                    }\r\n\r\n                    return new googleMapsSdk.places.PlacesService(node);\r\n                });\r\n        }\r\n\r\n        return this._placesPromise;\r\n    }\r\n}\r\n","import { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\r\n\r\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\r\nimport './GoogleAutocomplete.scss';\r\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\r\n\r\nexport interface GoogleAutocompleteProps {\r\n    initialValue?: string;\r\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\r\n    fields?: string[];\r\n    apiKey: string;\r\n    nextElement?: HTMLElement;\r\n    inputProps?: any;\r\n    isAutocompleteEnabled?: boolean;\r\n    types?: GoogleAutocompleteOptionTypes[];\r\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\r\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onChange?(value: string, isOpen: boolean): void;\r\n}\r\n\r\ninterface GoogleAutocompleteState {\r\n    items: AutocompleteItem[];\r\n    autoComplete: string;\r\n}\r\n\r\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\r\n    googleAutocompleteService: GoogleAutocompleteService;\r\n\r\n    constructor(props: GoogleAutocompleteProps) {\r\n        super(props);\r\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\r\n        this.state = {\r\n            items: [],\r\n            autoComplete: 'off',\r\n        };\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { initialValue, onToggleOpen = noop, inputProps = {} } = this.props;\r\n\r\n        const { autoComplete, items } = this.state;\r\n\r\n        return (\r\n            <Autocomplete\r\n                defaultHighlightedIndex={-1}\r\n                initialHighlightedIndex={-1}\r\n                initialValue={initialValue}\r\n                inputProps={{\r\n                    ...inputProps,\r\n                    autoComplete,\r\n                }}\r\n                items={items}\r\n                listTestId=\"address-autocomplete-suggestions\"\r\n                onChange={this.onChange}\r\n                onSelect={this.onSelect}\r\n                onToggleOpen={onToggleOpen}\r\n            >\r\n                <div className=\"co-googleAutocomplete-footer\" />\r\n            </Autocomplete>\r\n        );\r\n    }\r\n\r\n    private onSelect: (item: AutocompleteItem) => void = (item) => {\r\n        const { fields, onSelect = noop, nextElement } = this.props;\r\n\r\n        this.googleAutocompleteService.getPlacesServices().then((service) => {\r\n            service.getDetails(\r\n                {\r\n                    placeId: item.id,\r\n                    fields: fields || ['address_components', 'name'],\r\n                },\r\n                (result) => {\r\n                    if (nextElement) {\r\n                        nextElement.focus();\r\n                    }\r\n\r\n                    onSelect(result, item);\r\n                },\r\n            );\r\n        });\r\n    };\r\n\r\n    private onChange: (input: string) => void = (input) => {\r\n        const { isAutocompleteEnabled, onChange = noop } = this.props;\r\n\r\n        onChange(input, false);\r\n\r\n        if (!isAutocompleteEnabled) {\r\n            return this.resetAutocomplete();\r\n        }\r\n\r\n        this.setAutocomplete(input);\r\n        this.setItems(input);\r\n    };\r\n\r\n    private setItems(input: string): void {\r\n        if (!input) {\r\n            this.setState({ items: [] });\r\n\r\n            return;\r\n        }\r\n\r\n        const { componentRestrictions, types } = this.props;\r\n\r\n        this.googleAutocompleteService.getAutocompleteService().then((service) => {\r\n            service.getPlacePredictions(\r\n                {\r\n                    input,\r\n                    types: types || ['geocode'],\r\n                    componentRestrictions,\r\n                },\r\n                (results) => this.setState({ items: this.toAutocompleteItems(results ?? undefined) }),\r\n            );\r\n        });\r\n    }\r\n\r\n    private resetAutocomplete(): void {\r\n        this.setState({\r\n            items: [],\r\n            autoComplete: 'off',\r\n        });\r\n    }\r\n\r\n    private setAutocomplete(input: string): void {\r\n        this.setState({\r\n            ...this.state,\r\n            autoComplete: input && input.length ? 'nope' : 'off',\r\n        });\r\n    }\r\n\r\n    private toAutocompleteItems(\r\n        results?: google.maps.places.AutocompletePrediction[],\r\n    ): AutocompleteItem[] {\r\n        return (results || []).map((result) => ({\r\n            label: result.description,\r\n            value: result.structured_formatting.main_text,\r\n            highlightedSlices: result.matched_substrings,\r\n            id: result.place_id,\r\n        }));\r\n    }\r\n}\r\n\r\nexport default GoogleAutocomplete;\r\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\r\nimport classNames from 'classnames';\r\nimport { FieldProps } from 'formik';\r\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\nimport { useStyleContext } from '@bigcommerce/checkout/payment-integration-api';\r\n\r\nimport { AutocompleteItem } from '../../ui/autocomplete';\r\nimport { FormField, Label } from '../../ui/form';\r\nimport {\r\n    getAddressFormFieldInputId,\r\n    getAddressFormFieldLabelId,\r\n} from '../getAddressFormFieldInputId';\r\n\r\nimport GoogleAutocomplete from './GoogleAutocomplete';\r\n\r\nexport interface GoogleAutocompleteFormFieldProps {\r\n    apiKey: string;\r\n    field: FormFieldType;\r\n    countryCode?: string;\r\n    supportedCountries: string[];\r\n    nextElement?: HTMLElement;\r\n    parentFieldName?: string;\r\n    isFloatingLabelEnabled?: boolean;\r\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\r\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onChange(value: string, isOpen: boolean): void;\r\n}\r\n\r\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps> = ({\r\n    field: { default: placeholder, name, maxLength },\r\n    countryCode,\r\n    supportedCountries,\r\n    parentFieldName,\r\n    nextElement,\r\n    apiKey,\r\n    onSelect,\r\n    onChange,\r\n    onToggleOpen,\r\n    isFloatingLabelEnabled,\r\n}) => {\r\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\r\n\r\n    const { newFontStyle } = useStyleContext();\r\n    const labelContent = useMemo(() => <TranslatedString id=\"address.address_line_1_label\" />, []);\r\n\r\n    const labelId = getAddressFormFieldLabelId(name);\r\n\r\n    const inputProps = useMemo(\r\n        () => ({\r\n            className: classNames(\r\n                'form-input optimizedCheckout-form-input',\r\n                { 'floating-input': isFloatingLabelEnabled },\r\n                { 'floating-form-field-input': newFontStyle },\r\n            ),\r\n            id: getAddressFormFieldInputId(name),\r\n            'aria-labelledby': labelId,\r\n            placeholder: isFloatingLabelEnabled ? ' ' : placeholder,\r\n            labelText: isFloatingLabelEnabled ? labelContent : null,\r\n            maxLength: maxLength || undefined,\r\n        }),\r\n        [name, labelId, placeholder, labelContent, maxLength],\r\n    );\r\n\r\n    const renderInput = useCallback(\r\n        ({ field }: FieldProps) => (\r\n            <GoogleAutocomplete\r\n                apiKey={apiKey}\r\n                componentRestrictions={countryCode ? { country: countryCode } : undefined}\r\n                initialValue={field.value}\r\n                inputProps={inputProps}\r\n                isAutocompleteEnabled={\r\n                    countryCode ? supportedCountries.includes(countryCode) : false\r\n                }\r\n                nextElement={nextElement}\r\n                onChange={onChange}\r\n                onSelect={onSelect}\r\n                onToggleOpen={onToggleOpen}\r\n            />\r\n        ),\r\n        [\r\n            apiKey,\r\n            countryCode,\r\n            inputProps,\r\n            nextElement,\r\n            onChange,\r\n            onSelect,\r\n            onToggleOpen,\r\n            supportedCountries,\r\n        ],\r\n    );\r\n\r\n    const renderLabel = isFloatingLabelEnabled ? null : (\r\n        <Label additionalClassName={newFontStyle ? 'body-regular' : ''} htmlFor={inputProps.id} id={labelId}\r\n            isFloatingLabelEnabled={isFloatingLabelEnabled}>\r\n            {labelContent}\r\n        </Label>\r\n    );\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                'dynamic-form-field dynamic-form-field--addressLineAutocomplete',\r\n                { 'floating-form-field': isFloatingLabelEnabled },\r\n            )}\r\n            data-test=\"google-autocomplete-form-field\"\r\n        >\r\n            <FormField\r\n                input={renderInput}\r\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                label={renderLabel}\r\n                name={fieldName}\r\n                newFontStyle={newFontStyle}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(GoogleAutocompleteFormField);\r\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\r\nimport { memoize } from '@bigcommerce/memoize';\r\nimport { forIn, noop } from 'lodash';\r\nimport React, { Component, createRef, ReactNode, RefObject } from 'react';\r\n\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\nimport { StyleContext } from '@bigcommerce/checkout/payment-integration-api';\r\n\r\nimport { AutocompleteItem } from '../ui/autocomplete';\r\nimport { CheckboxFormField, DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\r\n\r\nimport { AddressKeyMap } from './address';\r\nimport {\r\n    getAddressFormFieldInputId,\r\n    getAddressFormFieldLegacyName,\r\n} from './getAddressFormFieldInputId';\r\nimport { GoogleAutocompleteFormField, mapToAddress } from './googleAutocomplete';\r\nimport './AddressForm.scss';\r\n\r\nexport interface AddressFormProps {\r\n    fieldName?: string;\r\n    countryCode?: string;\r\n    countriesWithAutocomplete?: string[];\r\n    countries?: Country[];\r\n    formFields: FormField[];\r\n    googleMapsApiKey?: string;\r\n    shouldShowSaveAddress?: boolean;\r\n    isFloatingLabelEnabled?: boolean;\r\n    onAutocompleteSelect?(address: Partial<Address>): void;\r\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onChange?(fieldName: string, value: string | string[]): void;\r\n    setFieldValue?(fieldName: string, value: string | string[]): void;\r\n}\r\n\r\nconst LABEL: AddressKeyMap = {\r\n    address1: 'address.address_line_1_label',\r\n    address2: 'address.address_line_2_label',\r\n    city: 'address.city_label',\r\n    company: 'address.company_name_label',\r\n    countryCode: 'address.country_label',\r\n    firstName: 'address.first_name_label',\r\n    lastName: 'address.last_name_label',\r\n    phone: 'address.phone_number_label',\r\n    postalCode: 'address.postal_code_label',\r\n    stateOrProvince: 'address.state_label',\r\n    stateOrProvinceCode: 'address.state_label',\r\n};\r\n\r\nconst AUTOCOMPLETE: AddressKeyMap = {\r\n    address1: 'address-line1',\r\n    address2: 'address-line2',\r\n    city: 'address-level2',\r\n    company: 'organization',\r\n    countryCode: 'country',\r\n    firstName: 'given-name',\r\n    lastName: 'family-name',\r\n    phone: 'tel',\r\n    postalCode: 'postal-code',\r\n    stateOrProvince: 'address-level1',\r\n    stateOrProvinceCode: 'address-level1',\r\n};\r\n\r\nconst PLACEHOLDER: AddressKeyMap = {\r\n    countryCode: 'address.select_country_action',\r\n    stateOrProvince: 'address.select_state_action',\r\n    stateOrProvinceCode: 'address.select_state_action',\r\n};\r\n\r\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\r\n\r\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\r\n    private containerRef: RefObject<HTMLElement> = createRef();\r\n    private nextElement?: HTMLElement | null;\r\n    static contextType = StyleContext;\r\n    declare context: React.ContextType<typeof StyleContext>;\r\n\r\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void =\r\n        memoize((name) => (value) => {\r\n            this.syncNonFormikValue(name, value);\r\n        });\r\n\r\n    componentDidMount(): void {\r\n        const { current } = this.containerRef;\r\n\r\n        if (current) {\r\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            formFields,\r\n            fieldName,\r\n            countriesWithAutocomplete,\r\n            countryCode,\r\n            googleMapsApiKey,\r\n            onAutocompleteToggle,\r\n            shouldShowSaveAddress,\r\n            isFloatingLabelEnabled,\r\n        } = this.props;\r\n\r\n        if (!this.context) {\r\n            throw Error('Need to wrap in style context');\r\n        }\r\n\r\n        const { newFontStyle } = this.context;\r\n\r\n        return (\r\n            <>\r\n                <Fieldset>\r\n                    <div\r\n                        className=\"checkout-address\"\r\n                        ref={this.containerRef as RefObject<HTMLDivElement>}\r\n                    >\r\n                        {formFields.map((field) => {\r\n                            const addressFieldName = field.name;\r\n                            const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\r\n\r\n                            if (\r\n                                addressFieldName === 'address1' &&\r\n                                googleMapsApiKey &&\r\n                                countriesWithAutocomplete\r\n                            ) {\r\n                                return (\r\n                                    <GoogleAutocompleteFormField\r\n                                        apiKey={googleMapsApiKey}\r\n                                        countryCode={countryCode}\r\n                                        field={field}\r\n                                        isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                                        key={field.id}\r\n                                        nextElement={this.nextElement || undefined}\r\n                                        onChange={this.handleAutocompleteChange}\r\n                                        onSelect={this.handleAutocompleteSelect}\r\n                                        onToggleOpen={onAutocompleteToggle}\r\n                                        parentFieldName={fieldName}\r\n                                        supportedCountries={countriesWithAutocomplete}\r\n                                    />\r\n                                );\r\n                            }\r\n\r\n                            return (\r\n                                <DynamicFormField\r\n                                    autocomplete={AUTOCOMPLETE[field.name]}\r\n                                    extraClass={`dynamic-form-field--${getAddressFormFieldLegacyName(\r\n                                        addressFieldName,\r\n                                    )}`}\r\n                                    field={field}\r\n                                    inputId={getAddressFormFieldInputId(addressFieldName)}\r\n                                    // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\r\n                                    isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                                    key={`${field.id}-${field.name}`}\r\n                                    label={\r\n                                        field.custom ? (\r\n                                            field.label\r\n                                        ) : (\r\n                                            <TranslatedString id={LABEL[field.name]} />\r\n                                        )\r\n                                    }\r\n                                    newFontStyle={newFontStyle}\r\n                                    onChange={this.handleDynamicFormFieldChange(addressFieldName)}\r\n                                    parentFieldName={\r\n                                        field.custom\r\n                                            ? fieldName\r\n                                                ? `${fieldName}.customFields`\r\n                                                : 'customFields'\r\n                                            : fieldName\r\n                                    }\r\n                                    placeholder={this.getPlaceholderValue(\r\n                                        field,\r\n                                        translatedPlaceholderId,\r\n                                    )}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </Fieldset>\r\n                {shouldShowSaveAddress && (\r\n                    <CheckboxFormField\r\n                        labelContent={<TranslatedString id=\"address.save_in_addressbook\" />}\r\n                        name={fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress'}\r\n                        newFontStyle={newFontStyle}\r\n                    />\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n\r\n    private getPlaceholderValue(field: FormField, translatedPlaceholderId: string): string {\r\n        const { language } = this.props;\r\n\r\n        if (field.default && field.fieldType !== 'dropdown') {\r\n            return field.default;\r\n        }\r\n\r\n        return translatedPlaceholderId && language.translate(translatedPlaceholderId);\r\n    }\r\n\r\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (\r\n        value,\r\n        isOpen,\r\n    ) => {\r\n        if (!isOpen) {\r\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\r\n        }\r\n    };\r\n\r\n    private handleAutocompleteSelect: (\r\n        place: google.maps.places.PlaceResult,\r\n        item: AutocompleteItem,\r\n    ) => void = (place, { value: autocompleteValue }) => {\r\n        const { countries, setFieldValue = noop, onChange = noop } = this.props;\r\n\r\n        const address = mapToAddress(place, countries);\r\n\r\n        forIn(address, (value, fieldName) => {\r\n            if (fieldName === AUTOCOMPLETE_FIELD_NAME && value === undefined) {\r\n                return;\r\n            }\r\n\r\n            setFieldValue(fieldName, value as string);\r\n            onChange(fieldName, value as string);\r\n        });\r\n\r\n        const address1 = address.address1 ? address.address1 : autocompleteValue;\r\n\r\n        if (address1) {\r\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, address1);\r\n        }\r\n    };\r\n\r\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\r\n    // value in sync when autocomplete value changes\r\n    private syncNonFormikValue: (fieldName: string, value: string | string[]) => void = (\r\n        fieldName,\r\n        value,\r\n    ) => {\r\n        const { formFields, setFieldValue = noop, onChange = noop } = this.props;\r\n\r\n        const dateFormFieldNames = formFields\r\n            .filter((field) => field.custom && field.fieldType === DynamicFormFieldType.date)\r\n            .map((field) => field.name);\r\n\r\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.includes(fieldName)) {\r\n            setFieldValue(fieldName, value);\r\n        }\r\n\r\n        onChange(fieldName, value);\r\n    };\r\n}\r\n\r\nexport default withLanguage(AddressForm);\r\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\r\n\r\nimport AddressSelectorFactory from './AddressSelectorFactory';\r\n\r\nexport default function mapToAddress(\r\n    autocompleteData: google.maps.places.PlaceResult,\r\n    countries: Country[] = [],\r\n): Partial<Address> {\r\n    if (!autocompleteData || !autocompleteData.address_components) {\r\n        return {};\r\n    }\r\n\r\n    const accessor = AddressSelectorFactory.create(autocompleteData);\r\n    const state = accessor.getState();\r\n    const countryCode = accessor.getCountry();\r\n    const country = countries && countries.find((c) => countryCode === c.code);\r\n    const street2 = accessor.getStreet2();\r\n\r\n    // TODO: Apply this fix for US, UK and CA addresses too.\r\n    const steet1 = countryCode === 'AU' ? accessor.getStreet() : undefined;\r\n\r\n    return {\r\n        address1: steet1,\r\n        address2: street2,\r\n        city: accessor.getCity(),\r\n        countryCode,\r\n        postalCode: accessor.getPostCode(),\r\n        ...(state ? getState(state, country && country.subdivisions) : {}),\r\n    };\r\n}\r\n\r\nfunction getState(stateName: string, states: Region[] = []): Partial<Address> {\r\n    const state = states.find(({ code, name }: Region) => code === stateName || name === stateName);\r\n\r\n    if (!state) {\r\n        return {\r\n            stateOrProvince: !states.length ? stateName : '',\r\n            stateOrProvinceCode: '',\r\n        };\r\n    }\r\n\r\n    return {\r\n        stateOrProvince: state.name,\r\n        stateOrProvinceCode: state.code,\r\n    };\r\n}\r\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { isGiftCertificatePayment } from '../giftCertificate';\r\n\r\nimport { isStoreCreditPayment } from './storeCredit';\r\n\r\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\r\n    const payments = checkout && checkout.payments ? checkout.payments : [];\r\n\r\n    return payments.find(\r\n        (payment) =>\r\n            !isGiftCertificatePayment(payment) &&\r\n            !isStoreCreditPayment(payment) &&\r\n            !!payment.providerId,\r\n    );\r\n}\r\n","import { Address } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\r\n\r\nimport { AddressFormValues } from './mapAddressToFormValues';\r\n\r\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\r\n    const { customFields, ...address } = formValues;\r\n    const shouldSaveAddress = formValues.shouldSaveAddress;\r\n\r\n    return {\r\n        ...address,\r\n        shouldSaveAddress,\r\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\r\n    };\r\n}\r\n","import React, { FunctionComponent, useState } from 'react';\r\n\r\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\nimport { useStyleContext } from '@bigcommerce/checkout/payment-integration-api';\r\n\r\nimport { AddressSelectProps } from './AddressSelect';\r\nimport SingleLineStaticAddress from './SingleLineStaticAddress';\r\nimport StaticAddress from './StaticAddress';\r\n\r\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses' | 'type' | 'showSingleLineAddress' | 'placeholderText'>;\r\n\r\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps & WithLanguageProps> = ({\r\n    selectedAddress,\r\n    language,\r\n    type,\r\n    showSingleLineAddress,\r\n    placeholderText,\r\n}) => {\r\n    const { newFontStyle } = useStyleContext();\r\n    const [ariaExpanded, setAriaExpanded] = useState(false);\r\n\r\n    const SelectedAddress = () => {\r\n        if (!selectedAddress) {\r\n            return (<span className={newFontStyle ? 'body-regular' : ''} data-test=\"address-select-placeholder\">\r\n                {placeholderText ?? <TranslatedString id=\"address.enter_address_action\" />}\r\n            </span>);\r\n        }\r\n\r\n        return showSingleLineAddress\r\n            ? <SingleLineStaticAddress address={selectedAddress} type={type} />\r\n            : <StaticAddress address={selectedAddress} type={type} />;\r\n    }\r\n\r\n    return (\r\n        <a\r\n            aria-controls=\"addressDropdown\"\r\n            aria-expanded={ariaExpanded}\r\n            aria-label={language.translate('address.enter_or_select_address_action')}\r\n            className=\"button dropdown-button dropdown-toggle--select\"\r\n            data-test=\"address-select-button\"\r\n            href=\"#\"\r\n            id=\"addressToggle\"\r\n            onBlur={() => setAriaExpanded(false)}\r\n            onClick={preventDefault(() => setAriaExpanded(!ariaExpanded))}\r\n        >\r\n            <SelectedAddress />\r\n        </a>\r\n    );\r\n};\r\n\r\nexport default withLanguage(AddressSelectButton);\r\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\r\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\r\n\r\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\nimport { PoweredByPayPalFastlaneLabel, usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\r\n\r\nimport { DropdownTrigger } from '../ui/dropdown';\r\n\r\nimport AddressSelectButton from './AddressSelectButton';\r\nimport AddressType from './AddressType';\r\nimport isEqualAddress from './isEqualAddress';\r\nimport StaticAddress from './StaticAddress';\r\n\r\nimport './AddressSelect.scss';\r\n\r\nexport interface AddressSelectProps {\r\n    addresses: CustomerAddress[];\r\n    selectedAddress?: Address;\r\n    type: AddressType;\r\n    showSingleLineAddress?: boolean;\r\n    onSelectAddress(address: Address): void;\r\n    onUseNewAddress(currentAddress?: Address): void;\r\n    placeholderText?: ReactNode;\r\n}\r\n\r\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\r\n    addresses,\r\n    onSelectAddress,\r\n    onUseNewAddress,\r\n    selectedAddress,\r\n    type,\r\n}) => (\r\n    <ul className=\"dropdown-menu instrumentSelect-dropdownMenu\" id=\"addressDropdown\">\r\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\r\n            <a\r\n                data-test=\"add-new-address\"\r\n                href=\"#\"\r\n                onClick={preventDefault(() => onUseNewAddress(selectedAddress))}\r\n            >\r\n                <TranslatedString id=\"address.enter_address_action\" />\r\n            </a>\r\n        </li>\r\n        {addresses.map((address) => (\r\n            <li\r\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\r\n                data-test=\"address-select-option\"\r\n                key={address.id}\r\n            >\r\n                <a\r\n                    data-test=\"address-select-option-action\"\r\n                    href=\"#\"\r\n                    onClick={preventDefault(() => onSelectAddress(address))}\r\n                >\r\n                    <StaticAddress address={address} type={type} />\r\n                </a>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nconst AddressSelect = ({\r\n    addresses,\r\n    selectedAddress,\r\n    type,\r\n    showSingleLineAddress,\r\n    onSelectAddress,\r\n    onUseNewAddress,\r\n    placeholderText,\r\n}: AddressSelectProps) => {\r\n    const { shouldShowPayPalFastlaneLabel } = usePayPalFastlaneAddress();\r\n\r\n    const handleSelectAddress = (newAddress: Address) => {\r\n        if (!isEqualAddress(selectedAddress, newAddress)) {\r\n            onSelectAddress(newAddress);\r\n        }\r\n    };\r\n\r\n    const handleUseNewAddress = () => {\r\n        onUseNewAddress(selectedAddress);\r\n    };\r\n\r\n    return (\r\n        <div className=\"form-field\">\r\n            <div className=\"dropdown--select\">\r\n                <DropdownTrigger\r\n                    dropdown={\r\n                        <AddressSelectMenu\r\n                            addresses={addresses}\r\n                            onSelectAddress={handleSelectAddress}\r\n                            onUseNewAddress={handleUseNewAddress}\r\n                            selectedAddress={selectedAddress}\r\n                            type={type}\r\n                        />\r\n                    }\r\n                >\r\n                    <AddressSelectButton\r\n                        addresses={addresses}\r\n                        placeholderText={placeholderText}\r\n                        selectedAddress={selectedAddress}\r\n                        showSingleLineAddress={showSingleLineAddress}\r\n                        type={type}\r\n                    />\r\n                </DropdownTrigger>\r\n            </div>\r\n\r\n            {shouldShowPayPalFastlaneLabel && <PoweredByPayPalFastlaneLabel />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(AddressSelect);\r\n","import { Address } from '@bigcommerce/checkout-sdk';\r\nimport classNames from 'classnames';\r\nimport { isEmpty } from 'lodash';\r\nimport React from \"react\";\r\n\r\nimport { useStyleContext } from '@bigcommerce/checkout/payment-integration-api';\r\n\r\nimport AddressType from \"./AddressType\";\r\n\r\nexport interface SingleLineStaticAddressProps {\r\n    address: Address;\r\n    type?: AddressType;\r\n}\r\n\r\nexport const getAddressContent: (value: Address) => string = ({\r\n    firstName,\r\n    lastName,\r\n    address1,\r\n    address2,\r\n    city,\r\n    countryCode,\r\n    stateOrProvince,\r\n    postalCode,\r\n}: Address): string => {\r\n    const addressParts = [address1, address2, city, stateOrProvince, countryCode, postalCode];\r\n    const nonEmptyAddressParts = addressParts.filter(Boolean);\r\n    const address = nonEmptyAddressParts.join(', ');\r\n\r\n    if (!firstName || !lastName || !address) {\r\n        return '';\r\n    }\r\n\r\n    return `${firstName} ${lastName}, ${address}`;\r\n};\r\n\r\nconst SingleLineStaticAddress = ({ address }: SingleLineStaticAddressProps) => {\r\n    const { newFontStyle } = useStyleContext();\r\n\r\n    const isValid = !isEmpty(address);\r\n\r\n    return !isValid ? null : (\r\n        <div className=\"vcard checkout-address--static\" data-test=\"static-address\">\r\n            <p className={classNames('address-entry', { 'body-regular': newFontStyle })}>\r\n                {getAddressContent(address)}\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SingleLineStaticAddress;\r\n","import { Placement } from '@popperjs/core';\r\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\r\nimport { Manager, Popper, Reference } from 'react-popper';\r\n\r\nimport {\r\n    CHECKOUT_ROOT_NODE_ID,\r\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\r\n} from '@bigcommerce/checkout/payment-integration-api';\r\n\r\nexport interface DropdownTriggerProps {\r\n    placement?: Placement;\r\n    dropdown: ReactNode;\r\n    children?: ReactNode;\r\n}\r\n\r\nexport interface DropdownTriggerState {\r\n    shouldShow: boolean;\r\n}\r\n\r\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\r\n    static defaultProps = {\r\n        placement: 'bottom-start',\r\n    };\r\n\r\n    state: Readonly<DropdownTriggerState> = {\r\n        shouldShow: false,\r\n    };\r\n\r\n    componentWillUnmount(): void {\r\n        document.removeEventListener('click', this.handleClose);\r\n    }\r\n\r\n    render() {\r\n        const { children, placement, dropdown } = this.props;\r\n        const { shouldShow } = this.state;\r\n\r\n        return (\r\n            <Manager>\r\n                <Reference>\r\n                    {({ ref }) => (\r\n                        <div className=\"dropdownTrigger\" onClick={this.handleClick} ref={ref}>\r\n                            {children}\r\n                        </div>\r\n                    )}\r\n                </Reference>\r\n\r\n                <Popper\r\n                    modifiers={[\r\n                        { name: 'hide', enabled: false },\r\n                        { name: 'flip', enabled: false },\r\n                        { name: 'preventOverflow', enabled: false },\r\n                    ]}\r\n                    placement={placement}\r\n                >\r\n                    {({ ref, style }) =>\r\n                        !shouldShow ? null : (\r\n                            <div\r\n                                className=\"dropdownMenu\"\r\n                                ref={ref}\r\n                                style={{\r\n                                    ...style,\r\n                                    width: '100%',\r\n                                    zIndex: 1,\r\n                                }}\r\n                            >\r\n                                {dropdown}\r\n                            </div>\r\n                        )\r\n                    }\r\n                </Popper>\r\n            </Manager>\r\n        );\r\n    }\r\n\r\n    private handleClick: MouseEventHandler<HTMLElement> = (event) => {\r\n        const { shouldShow } = this.state;\r\n\r\n        if (shouldShow) {\r\n            this.handleClose(event.nativeEvent);\r\n        } else {\r\n            this.handleOpen(event.nativeEvent);\r\n        }\r\n    };\r\n\r\n    private handleOpen: (event: MouseEvent) => void = () => {\r\n        const { shouldShow } = this.state;\r\n\r\n        if (shouldShow) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ shouldShow: true }, () => {\r\n            this.getRootElement()?.addEventListener('click', this.handleClose);\r\n        });\r\n    };\r\n\r\n    private handleClose: (event: MouseEvent) => void = () => {\r\n        const { shouldShow } = this.state;\r\n\r\n        if (!shouldShow) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ shouldShow: false }, () => {\r\n            this.getRootElement()?.removeEventListener('click', this.handleClose);\r\n        });\r\n    };\r\n\r\n    private getRootElement() {\r\n        return (\r\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\r\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\r\n        );\r\n    }\r\n}\r\n","import { FieldProps } from 'formik';\r\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\nimport { useStyleContext } from '@bigcommerce/checkout/payment-integration-api';\r\n\r\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\r\n\r\nconst OrderComments: FunctionComponent = () => {\r\n    const { newFontStyle } = useStyleContext();\r\n\r\n    const renderLabel = useCallback(\r\n        (name: string) => (\r\n            <Label hidden htmlFor={name}>\r\n                <TranslatedString id=\"shipping.order_comment_label\" />\r\n            </Label>\r\n        ),\r\n        [],\r\n    );\r\n\r\n    const renderInput = useCallback(\r\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"off\" id=\"orderComment\" maxLength={2000} newFontStyle={newFontStyle} />,\r\n        [],\r\n    );\r\n\r\n    const legend = useMemo(\r\n        () => (\r\n            <Legend newFontStyle={newFontStyle}>\r\n                <TranslatedString id=\"shipping.order_comment_label\" />\r\n            </Legend>\r\n        ),\r\n        [],\r\n    );\r\n\r\n    return (\r\n        <Fieldset legend={legend} testId=\"checkout-shipping-comments\">\r\n            <FormField id=\"orderComment\" input={renderInput} label={renderLabel} name=\"orderComment\" />\r\n        </Fieldset>\r\n    );\r\n};\r\n\r\nexport default OrderComments;\r\n","import { Cart } from '@bigcommerce/checkout-sdk';\r\n\r\nimport getLineItemsCount from './getLineItemsCount';\r\n\r\nexport default function getShippableItemsCount(\r\n    cart: Cart,\r\n): number {\r\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion && !item.parentId));\r\n}\r\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\r\nimport { some } from 'lodash';\r\n\r\nimport isEqualAddress from './isEqualAddress';\r\nimport isValidAddress from './isValidAddress';\r\n\r\nexport default function isValidCustomerAddress(\r\n    address: Address | undefined,\r\n    addresses: CustomerAddress[],\r\n    formFields: FormField[],\r\n): boolean {\r\n    if (!address || !isValidAddress(address, formFields)) {\r\n        return false;\r\n    }\r\n\r\n    return some(addresses, (customerAddress) => isEqualAddress(customerAddress, address));\r\n}\r\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\r\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\r\n","import {\r\n    Address,\r\n    AddressRequestBody,\r\n    BillingAddress,\r\n    CustomerAddress,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { isEqual, omit } from 'lodash';\r\n\r\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\r\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\r\n\r\nexport default function isEqualAddress(\r\n    address1?: ComparableAddress,\r\n    address2?: ComparableAddress,\r\n): boolean {\r\n    if (!address1 || !address2) {\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        isEqual(normalizeAddress(address1), normalizeAddress(address2)) &&\r\n        isSameState(address1, address2)\r\n    );\r\n}\r\n\r\nfunction isSameState(address1: ComparableAddress, address2: ComparableAddress): boolean {\r\n    if (address1.stateOrProvince && address1.stateOrProvince === address2.stateOrProvince) {\r\n        return true;\r\n    }\r\n\r\n    if (\r\n        address1.stateOrProvinceCode &&\r\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\r\n    ) {\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        address1.stateOrProvince === address2.stateOrProvince &&\r\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\r\n    );\r\n}\r\n\r\nfunction normalizeAddress(address: ComparableAddress) {\r\n    const ignoredFields: ComparableAddressFields[] = [\r\n        'id',\r\n        'shouldSaveAddress',\r\n        'stateOrProvince',\r\n        'stateOrProvinceCode',\r\n        'type',\r\n        'email',\r\n        'country',\r\n    ];\r\n\r\n    return omit(\r\n        {\r\n            ...address,\r\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\r\n        },\r\n        ignoredFields,\r\n    );\r\n}\r\n"],"names":["ADDRESS_FIELD_IDS","address1","address2","postalCode","stateOrProvince","stateOrProvinceCode","getAddressFormFieldLegacyName","name","getAddressFormFieldInputId","googlePlace","address_components","this","_name","_address","getState","_get","getStreet","getStreet2","getCountry","getCity","getPostCode","type","access","element","find","field","types","includes","create","autocompleteData","countryComponent","component","short_name","children","className","getItemClassName","highlightedIndex","index","classes","push","join","memo","testId","getItemProps","props","menuProps","items","length","map","item","key","id","content","stateReducer","state","changes","onChange","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","noop","undefined","render","inputProps","initialValue","initialHighlightedIndex","defaultHighlightedIndex","onSelect","listTestId","context","Error","newFontStyle","initialInputValue","itemToString","labelId","onStateChange","getInputProps","getMenuProps","validInputProps","value","labelText","Label","additionalClassName","htmlFor","isFloatingLabelEnabled","isNumber","toPopoverItem","highlightItem","highlightedSlices","label","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","Fragment","substr","contextType","StyleContext","PureComponent","_scriptLoader","getScriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","callbackName","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","instance","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","getPlacesServices","document","createElement","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","input","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","autoComplete","componentRestrictions","getPlacePredictions","results","setState","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","placeholder","maxLength","countryCode","supportedCountries","parentFieldName","fieldName","labelContent","useMemo","TranslatedString","getAddressFormFieldLabelId","renderInput","useCallback","country","renderLabel","FormField","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","createRef","handleDynamicFormFieldChange","memoize","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","setFieldValue","address","accessor","c","code","street2","steet1","stateName","states","subdivisions","mapToAddress","forIn","formFields","dateFormFieldNames","filter","custom","fieldType","DynamicFormFieldType","date","componentDidMount","current","querySelector","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","ref","addressFieldName","translatedPlaceholderId","DynamicFormField","autocomplete","extraClass","inputId","getPlaceholderValue","CheckboxFormField","language","default","translate","Component","withLanguage","AddressForm","getPreselectedPayment","checkout","payments","payment","providerId","mapAddressFromFormValues","formValues","customFields","shouldSaveAddress","selectedAddress","showSingleLineAddress","placeholderText","useState","ariaExpanded","setAriaExpanded","href","onBlur","onClick","preventDefault","SingleLineStaticAddress","StaticAddress","AddressSelectMenu","addresses","onSelectAddress","onUseNewAddress","shouldShowPayPalFastlaneLabel","usePayPalFastlaneAddress","DropdownTrigger","dropdown","newAddress","isEqualAddress","PoweredByPayPalFastlaneLabel","getAddressContent","isEmpty","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","getRootElement","addEventListener","removeEventListener","componentWillUnmount","placement","modifiers","enabled","style","width","zIndex","getElementById","defaultProps","hidden","legend","getShippableItemsCount","cart","lineItems","physicalItems","addedByPromotion","parentId","isValidCustomerAddress","some","customerAddress","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID","isEqual","normalizeAddress","isSameState","omit"],"sourceRoot":""}