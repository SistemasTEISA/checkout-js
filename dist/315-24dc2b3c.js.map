{"version":3,"file":"315-24dc2b3c.js","mappings":"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","sources":["webpack://checkout/./packages/ui/src/form/Label/Label.tsx","webpack://checkout/./packages/ui/src/icon/IconHelp.tsx","webpack://checkout/./packages/ui/src/form/TextInput/TextInput.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./packages/ui/src/form/Input/Input.tsx","webpack://checkout/./packages/ui/src/form/Fieldset/Fieldset.tsx","webpack://checkout/./packages/ui/src/form/RadioInput/RadioInput.tsx","webpack://checkout/./packages/ui/src/form/FormFieldError/FormFieldError.tsx","webpack://checkout/./packages/ui/src/form/FormField/FormField.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionContext.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormFieldType.ts","webpack://checkout/./packages/ui/src/form/DynamicFormField/MultiCheckboxControl.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/CheckboxGroupFormField.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormField.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/Tooltip.tsx","webpack://checkout/./packages/ui/src/icon/IconError.tsx","webpack://checkout/./packages/ui/src/icon/IconSuccess.tsx","webpack://checkout/./packages/ui/src/icon/IconInfo.tsx","webpack://checkout/./packages/ui/src/alert/Alert.tsx","webpack://checkout/./packages/ui/src/form/CheckboxInput/CheckboxInput.tsx","webpack://checkout/./packages/ui/src/icon/IconChevronDown.tsx","webpack://checkout/./packages/ui/src/form/TextArea/TextArea.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicInput.tsx","webpack://checkout/./packages/ui/src/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/ui/src/form/FormFieldContainer/FormFieldContainer.tsx","webpack://checkout/./packages/ui/src/tooltip/TooltipTrigger.tsx","webpack://checkout/./packages/ui/src/form/BasicFormField/BasicFormField.tsx"],"sourcesContent":["import classNames from 'classnames';\r\nimport React, { FunctionComponent, LabelHTMLAttributes } from 'react';\r\n\r\nexport interface LabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\r\n    testId?: string;\r\n    hidden?: boolean;\r\n}\r\n\r\nconst Label: FunctionComponent<LabelProps> = ({ children, className, hidden, testId, ...rest }) => (\r\n    <label\r\n        {...rest}\r\n        className={classNames(\r\n            className || 'form-label',\r\n            { 'is-srOnly': hidden },\r\n            'optimizedCheckout-form-label',\r\n        )}\r\n        data-test={testId}\r\n    >\r\n        {children}\r\n    </label>\r\n);\r\n\r\nexport default Label;\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconHelp: FunctionComponent = () => (\r\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconHelp);\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, Ref } from 'react';\r\n\r\nimport { Input, InputProps } from '../Input';\r\n\r\nexport interface TextInputProps extends InputProps {\r\n    additionalClassName?: string;\r\n    appearFocused?: boolean;\r\n    type?: 'text' | 'password' | 'tel' | 'email' | 'number';\r\n}\r\n\r\nconst TextInput = forwardRef(\r\n    (\r\n        { additionalClassName, appearFocused, type = 'text', ...rest }: TextInputProps,\r\n        ref: Ref<HTMLInputElement>,\r\n    ) => (\r\n        <Input\r\n            {...rest}\r\n            className={classNames(\r\n                'form-input',\r\n                'optimizedCheckout-form-input',\r\n                { 'form-input--focus': appearFocused },\r\n                { 'optimizedCheckout-form-input--focus': appearFocused },\r\n                additionalClassName,\r\n            )}\r\n            ref={ref}\r\n            type={type}\r\n        />\r\n    ),\r\n);\r\n\r\nexport default TextInput;\r\n","import classNames from 'classnames';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport AccordionContext from './AccordionContext';\r\n\r\nexport interface AccordionItemProps {\r\n    bodyClassName?: string;\r\n    children?: ReactNode;\r\n    className?: string;\r\n    classNameSelected?: string;\r\n    headerClassName?: string;\r\n    headerClassNameSelected?: string;\r\n    itemId: string;\r\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\r\n}\r\n\r\nexport interface AccordionItemHeaderProps {\r\n    isSelected: boolean;\r\n    onToggle(id: string): void;\r\n}\r\n\r\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\r\n    bodyClassName = 'accordion-item-body',\r\n    children,\r\n    className = 'accordion-item',\r\n    classNameSelected = 'accordion-item--selected',\r\n    headerClassName = 'accordion-item-header',\r\n    headerClassNameSelected = 'accordion-item-header--selected',\r\n    headerContent,\r\n    itemId,\r\n}) => {\r\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\r\n    const isSelected = selectedItemId === itemId;\r\n\r\n    const transitionEndListener = useCallback((node: Node, done: () => void) => {\r\n        node.addEventListener('transitionend', ({ target }: Event) => {\r\n            if (target === node) {\r\n                done();\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <li className={classNames(className, { [classNameSelected]: isSelected })}>\r\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\r\n                {headerContent({ isSelected, onToggle })}\r\n            </div>\r\n\r\n            {children ? (\r\n                <CSSTransition\r\n                    addEndListener={transitionEndListener}\r\n                    classNames={bodyClassName}\r\n                    in={isSelected}\r\n                    mountOnEnter\r\n                    timeout={{}}\r\n                    unmountOnExit\r\n                >\r\n                    <div aria-live=\"polite\" className={bodyClassName}>\r\n                        {children}\r\n                    </div>\r\n                </CSSTransition>\r\n            ) : null}\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default memo(AccordionItem);\r\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\r\n\r\nimport Input from './Input';\r\nimport Label from './Label';\r\n\r\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\r\n    isSelected: boolean;\r\n}\r\n\r\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\r\n    id,\r\n    isSelected,\r\n    children,\r\n    ...props\r\n}) => (\r\n    <>\r\n        <Input\r\n            {...props}\r\n            checked={isSelected}\r\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\r\n            id={id}\r\n            type=\"radio\"\r\n        />\r\n\r\n        <Label htmlFor={id}>{children}</Label>\r\n    </>\r\n);\r\n\r\nexport default ChecklistItemInput;\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\nimport { FieldProps } from 'formik';\r\nimport { kebabCase } from 'lodash';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\r\n\r\nimport { AccordionItem, AccordionItemHeaderProps } from '@bigcommerce/checkout/ui';\r\n\r\nimport BasicFormField from './BasicFormField';\r\nimport { ChecklistContext } from './Checklist';\r\nimport ChecklistItemInput from './ChecklistItemInput';\r\n\r\nexport interface ChecklistItemProps {\r\n    content?: ReactNode;\r\n    htmlId?: string;\r\n    isDisabled?: boolean;\r\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\r\n    value: string;\r\n}\r\n\r\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\r\n    isDisabled,\r\n    value,\r\n    content,\r\n    htmlId = kebabCase(value),\r\n    label,\r\n    ...rest\r\n}) => {\r\n    const { name = '' } = useContext(ChecklistContext) || {};\r\n\r\n    const renderInput = useCallback(\r\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\r\n            <ChecklistItemInput\r\n                {...field}\r\n                disabled={isDisabled}\r\n                id={htmlId}\r\n                isSelected={field.value === value}\r\n                value={value}\r\n            >\r\n                {label instanceof Function ? label(isSelected) : label}\r\n            </ChecklistItemInput>\r\n        )),\r\n        [htmlId, isDisabled, label, value],\r\n    );\r\n\r\n    const handleChange = useCallback(\r\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\r\n            if (value === selectedValue) {\r\n                onToggle(value);\r\n            }\r\n        }),\r\n        [],\r\n    );\r\n\r\n    const renderHeaderContent = useCallback(\r\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\r\n            <BasicFormField\r\n                className=\"form-checklist-option\"\r\n                name={name}\r\n                onChange={handleChange(onToggle)}\r\n                render={renderInput(isSelected)}\r\n            />\r\n        ),\r\n        [handleChange, name, renderInput],\r\n    );\r\n\r\n    return (\r\n        <AccordionItem\r\n            {...rest}\r\n            bodyClassName=\"form-checklist-body\"\r\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\r\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\r\n            headerClassName=\"form-checklist-header\"\r\n            headerClassNameSelected=\"form-checklist-header--selected\"\r\n            headerContent={renderHeaderContent}\r\n            itemId={value}\r\n        >\r\n            {content}\r\n        </AccordionItem>\r\n    );\r\n};\r\n\r\nexport default memo(ChecklistItem);\r\n","import React, { forwardRef, InputHTMLAttributes, Ref } from 'react';\r\n\r\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\r\n    testId?: string;\r\n}\r\n\r\nconst Input = forwardRef(({ testId, ...rest }: InputProps, ref: Ref<HTMLInputElement>) => (\r\n    <input {...rest} data-test={testId} ref={ref} />\r\n));\r\n\r\nexport default Input;\r\n","import classNames from 'classnames';\r\nimport React, { FieldsetHTMLAttributes, forwardRef, ReactNode, Ref } from 'react';\r\n\r\nexport interface FieldsetProps extends FieldsetHTMLAttributes<HTMLFieldSetElement> {\r\n    additionalClassName?: string;\r\n    testId?: string;\r\n    legend?: ReactNode;\r\n}\r\n\r\nconst Fieldset = forwardRef(\r\n    (\r\n        { additionalClassName, children, className, legend, testId, ...rest }: FieldsetProps,\r\n        ref: Ref<HTMLFieldSetElement>,\r\n    ) => (\r\n        <fieldset\r\n            {...rest}\r\n            className={className || classNames('form-fieldset', additionalClassName)}\r\n            data-test={testId}\r\n            ref={ref}\r\n        >\r\n            {legend}\r\n\r\n            <div className=\"form-body\">{children}</div>\r\n        </fieldset>\r\n    ),\r\n);\r\n\r\nexport default Fieldset;\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, ReactNode, Ref } from 'react';\r\n\r\nimport Input, { InputProps } from '../Input/Input';\r\nimport Label from '../Label/Label';\r\n\r\nexport interface RadioInputProps extends InputProps {\r\n    additionalClassName?: string;\r\n    label: ReactNode;\r\n    value: string;\r\n    checked: boolean;\r\n}\r\n\r\nconst RadioInput = forwardRef(\r\n    (\r\n        { additionalClassName, label, value, checked, id, ...rest }: RadioInputProps,\r\n        ref: Ref<HTMLInputElement>,\r\n    ) => (\r\n        <>\r\n            <Input\r\n                {...rest}\r\n                checked={checked}\r\n                className={classNames(\r\n                    'form-radio',\r\n                    'optimizedCheckout-form-radio',\r\n                    additionalClassName,\r\n                )}\r\n                id={id}\r\n                ref={ref}\r\n                type=\"radio\"\r\n                value={value}\r\n            />\r\n            <Label htmlFor={id}>{label}</Label>\r\n        </>\r\n    ),\r\n);\r\n\r\nexport default RadioInput;\r\n","import { ErrorMessage } from 'formik';\r\nimport React, { FunctionComponent, memo, useCallback } from 'react';\r\n\r\nimport { FormContext } from '../contexts';\r\n\r\nexport interface FormFieldErrorProps {\r\n    name: string;\r\n    testId?: string;\r\n    errorId: string;\r\n}\r\n\r\nconst FormFieldError: FunctionComponent<FormFieldErrorProps> = ({ name, testId, errorId }) => {\r\n    const renderMessage = useCallback(\r\n        (message: string) => (\r\n            <ul className=\"form-field-errors\" data-test={testId}>\r\n                <li className=\"form-field-error\">\r\n                    <label\r\n                        aria-live=\"polite\"\r\n                        className=\"form-inlineMessage\"\r\n                        htmlFor={name}\r\n                        id={errorId}\r\n                        role=\"alert\"\r\n                    >\r\n                        {message}\r\n                    </label>\r\n                </li>\r\n            </ul>\r\n        ),\r\n        [errorId, name, testId],\r\n    );\r\n\r\n    return (\r\n        <FormContext.Consumer>\r\n            {({ isSubmitted }) =>\r\n                isSubmitted && <ErrorMessage name={name} render={renderMessage} />\r\n            }\r\n        </FormContext.Consumer>\r\n    );\r\n};\r\n\r\nexport default memo(FormFieldError);\r\n","import { FieldProps } from 'formik';\r\nimport { kebabCase } from 'lodash';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\r\n\r\nimport { BasicFormField } from '../BasicFormField';\r\nimport { FormFieldError } from '../FormFieldError';\r\nimport { Label } from '../Label';\r\n\r\nexport interface FormFieldProps {\r\n    additionalClassName?: string;\r\n    name: string;\r\n    label?: ReactNode | ((fieldName: string) => ReactNode);\r\n    labelContent?: ReactNode;\r\n    footer?: ReactNode;\r\n    id?: string;\r\n    input(field: FieldProps<string>): ReactNode;\r\n    onChange?(value: string): void;\r\n}\r\n\r\nconst FormField: FunctionComponent<FormFieldProps> = ({\r\n    additionalClassName,\r\n    labelContent,\r\n    label,\r\n    onChange,\r\n    footer,\r\n    input,\r\n    name,\r\n    id,\r\n}) => {\r\n    const renderField = useCallback(\r\n        (props: FieldProps<string>) => (\r\n            <>\r\n                {Boolean(label) && (typeof label === 'function' ? label(name) : label)}\r\n\r\n                {Boolean(labelContent && !label) && (\r\n                    <Label htmlFor={name} id={`${id ?? name}-label`}>\r\n                        {labelContent}\r\n                    </Label>\r\n                )}\r\n\r\n                {input(props)}\r\n\r\n                <FormFieldError\r\n                    errorId={`${id ?? name}-field-error-message`}\r\n                    name={name}\r\n                    testId={`${kebabCase(name)}-field-error-message`}\r\n                />\r\n\r\n                {footer}\r\n            </>\r\n        ),\r\n        [label, labelContent, id, input, name, footer],\r\n    );\r\n\r\n    return (\r\n        <BasicFormField\r\n            additionalClassName={additionalClassName}\r\n            name={name}\r\n            onChange={onChange}\r\n            render={renderField}\r\n        />\r\n    );\r\n};\r\n\r\nexport default memo(FormField);\r\n","import { noop } from 'lodash';\r\nimport { createContext } from 'react';\r\n\r\nexport interface AccordionContextProps {\r\n    selectedItemId?: string;\r\n    onToggle(id: string): void;\r\n}\r\n\r\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\r\n\r\nexport default AccordionContext;\r\n","enum DynamicFormFieldType {\r\n    TELEPHONE = 'tel',\r\n    DROPDOWM = 'dropdown',\r\n    NUMBER = 'number',\r\n    PASSWORD = 'password',\r\n    CHECKBOX = 'checkbox',\r\n    MULTILINE = 'multiline',\r\n    DATE = 'date',\r\n    RADIO = 'radio',\r\n    TEXT = 'text',\r\n}\r\n\r\nexport default DynamicFormFieldType;\r\n","/* istanbul ignore file */\r\n\r\nimport React, { FunctionComponent, memo, MouseEvent, useCallback } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport './MultiCheckboxControl.scss';\r\n\r\nexport interface MultiCheckboxControlProps {\r\n    testId?: string;\r\n    onSelectedAll(): void;\r\n    onSelectedNone(): void;\r\n}\r\n\r\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\r\n    testId,\r\n    onSelectedAll,\r\n    onSelectedNone,\r\n}) => {\r\n    const handleSelectAllClick = useCallback(\r\n        (event: MouseEvent) => {\r\n            event.preventDefault();\r\n            onSelectedAll();\r\n        },\r\n        [onSelectedAll],\r\n    );\r\n\r\n    const handleSelectNoneClick = useCallback(\r\n        (event: MouseEvent) => {\r\n            event.preventDefault();\r\n            onSelectedNone();\r\n        },\r\n        [onSelectedNone],\r\n    );\r\n\r\n    return (\r\n        <ul className=\"multiCheckbox--controls\">\r\n            <li className=\"multiCheckbox--control\">\r\n                <TranslatedString id=\"address.select\" />\r\n            </li>\r\n\r\n            <li className=\"multiCheckbox--control\">\r\n                <a\r\n                    data-test={`${testId || ''}Checkbox-all-button`}\r\n                    href=\"#\"\r\n                    onClick={handleSelectAllClick}\r\n                >\r\n                    <TranslatedString id=\"address.select_all\" />\r\n                </a>\r\n            </li>\r\n\r\n            <li className=\"multiCheckbox--control\">\r\n                <a\r\n                    data-test={`${testId || ''}Checkbox-none-button`}\r\n                    href=\"#\"\r\n                    onClick={handleSelectNoneClick}\r\n                >\r\n                    <TranslatedString id=\"address.select_none\" />\r\n                </a>\r\n            </li>\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default memo(MultiCheckboxControl);\r\n","/* istanbul ignore file */\r\n\r\nimport { FormFieldItem } from '@bigcommerce/checkout-sdk';\r\nimport { FieldArray, FieldArrayRenderProps, getIn } from 'formik';\r\nimport { difference, kebabCase, noop, pick } from 'lodash';\r\nimport React, { ChangeEvent, FunctionComponent, memo, ReactNode, useCallback } from 'react';\r\n\r\nimport { FormFieldContainer } from '../FormFieldContainer';\r\nimport { FormFieldError } from '../FormFieldError';\r\n\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\nimport DynamicInput from './DynamicInput';\r\nimport MultiCheckboxControl from './MultiCheckboxControl';\r\n\r\nexport interface CheckboxGroupFormFieldProps {\r\n    id: string;\r\n    label: ReactNode;\r\n    name: string;\r\n    options: FormFieldItem[];\r\n    onChange?(values: string[]): void;\r\n}\r\n\r\ntype MultiCheckboxFormFieldProps = CheckboxGroupFormFieldProps &\r\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>;\r\n\r\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\r\n    form: { values, errors },\r\n    id,\r\n    label,\r\n    name,\r\n    onChange = noop,\r\n    options,\r\n    push,\r\n    remove,\r\n}) => {\r\n    const handleSelectAll = useCallback(() => {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        const checkedValues: string[] = getIn(values, name) || [];\r\n\r\n        difference(\r\n            options.map(({ value }) => value),\r\n            checkedValues,\r\n        ).forEach((val) => push(val));\r\n\r\n        onChange(getIn(values, name));\r\n    }, [name, onChange, options, push, values]);\r\n\r\n    const handleSelectNone = useCallback(() => {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        const checkedValues: string[] = getIn(values, name) || [];\r\n\r\n        checkedValues.forEach(() => remove(0));\r\n\r\n        onChange(getIn(values, name));\r\n    }, [name, onChange, remove, values]);\r\n\r\n    const handleInputChange = useCallback(\r\n        (event: ChangeEvent<HTMLInputElement>) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            const checkedValues: string[] = getIn(values, name) || [];\r\n            const { value, checked } = event.target;\r\n\r\n            if (checked) {\r\n                push(value);\r\n            } else {\r\n                remove(checkedValues.indexOf(value));\r\n            }\r\n\r\n            onChange(getIn(values, name));\r\n        },\r\n        [name, onChange, push, remove, values],\r\n    );\r\n\r\n    return (\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        <FormFieldContainer hasError={getIn(errors, name) && getIn(errors, name).length}>\r\n            {label}\r\n\r\n            {options.length > 1 && (\r\n                <MultiCheckboxControl\r\n                    onSelectedAll={handleSelectAll}\r\n                    onSelectedNone={handleSelectNone}\r\n                    testId={id}\r\n                />\r\n            )}\r\n\r\n            <DynamicInput\r\n                fieldType={DynamicFormFieldType.CHECKBOX}\r\n                id={id}\r\n                name={name}\r\n                onChange={handleInputChange}\r\n                options={options}\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                value={getIn(values, name) || []}\r\n            />\r\n\r\n            <FormFieldError\r\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n                errorId={`${id ?? name}-field-error-message`}\r\n                name={name}\r\n                testId={`${kebabCase(name)}-field-error-message`}\r\n            />\r\n        </FormFieldContainer>\r\n    );\r\n};\r\n\r\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\r\n    id,\r\n    label,\r\n    name,\r\n    onChange,\r\n    options,\r\n}) => {\r\n    const renderField = useCallback(\r\n        (renderProps: FieldArrayRenderProps) => (\r\n            <MultiCheckboxFormField\r\n                id={id}\r\n                label={label}\r\n                name={name}\r\n                onChange={onChange}\r\n                options={options}\r\n                {...pick(renderProps, ['form', 'pop', 'push', 'remove'])}\r\n            />\r\n        ),\r\n        [id, label, name, onChange, options],\r\n    );\r\n\r\n    return <FieldArray name={name} render={renderField} />;\r\n};\r\n\r\nexport default memo(CheckboxGroupFormField);\r\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\r\nimport { FieldProps } from 'formik';\r\nimport { includes } from 'lodash';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { FormField } from '../FormField';\r\nimport { Label } from '../Label';\r\n\r\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\nimport DynamicInput from './DynamicInput';\r\n\r\nexport interface DynamicFormFieldOption {\r\n    code: string;\r\n    name: string;\r\n}\r\n\r\nexport interface DynamicFormFieldProps {\r\n    field: FormFieldType;\r\n    inputId?: string;\r\n    extraClass?: string;\r\n    autocomplete?: string;\r\n    parentFieldName?: string;\r\n    placeholder?: string;\r\n    label?: ReactNode;\r\n    onChange?(value: string | string[]): void;\r\n}\r\n\r\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps> = ({\r\n    field: {\r\n        fieldType,\r\n        type,\r\n        secret,\r\n        name,\r\n        label: fieldLabel,\r\n        required,\r\n        options,\r\n        max,\r\n        min,\r\n        maxLength,\r\n        inputDateFormat,\r\n    },\r\n    parentFieldName,\r\n    onChange,\r\n    placeholder,\r\n    inputId,\r\n    autocomplete,\r\n    label,\r\n    extraClass,\r\n}) => {\r\n    const fieldInputId = inputId || name;\r\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\r\n\r\n    const labelComponent = useMemo(\r\n        () => (\r\n            <Label htmlFor={fieldInputId} id={`${fieldInputId}-label`}>\r\n                {label || fieldLabel}\r\n                {!required && (\r\n                    <>\r\n                        {' '}\r\n                        <small className=\"optimizedCheckout-contentSecondary\">\r\n                            <TranslatedString id=\"common.optional_text\" />\r\n                        </small>\r\n                    </>\r\n                )}\r\n            </Label>\r\n        ),\r\n        [fieldInputId, fieldLabel, required, label],\r\n    );\r\n\r\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\r\n        if (fieldType === 'text') {\r\n            if (type === 'integer') {\r\n                return DynamicFormFieldType.NUMBER;\r\n            }\r\n\r\n            if (includes(name, 'phone') || includes(name, 'tel')) {\r\n                return DynamicFormFieldType.TELEPHONE;\r\n            }\r\n\r\n            return secret ? DynamicFormFieldType.PASSWORD : DynamicFormFieldType.TEXT;\r\n        }\r\n\r\n        return fieldType as DynamicFormFieldType;\r\n    }, [fieldType, type, name, secret]);\r\n\r\n    const renderInput = useCallback(\r\n        ({ field }: FieldProps<string>) => (\r\n            <DynamicInput\r\n                {...field}\r\n                aria-labelledby={`${fieldInputId}-label ${fieldInputId}-field-error-message`}\r\n                autoComplete={autocomplete}\r\n                fieldType={dynamicFormFieldType}\r\n                id={fieldInputId}\r\n                inputDateFormat={inputDateFormat}\r\n                max={max}\r\n                maxLength={maxLength || undefined}\r\n                min={min}\r\n                options={options && options.items}\r\n                placeholder={placeholder || (options && options.helperLabel)}\r\n                rows={options && options.rows}\r\n            />\r\n        ),\r\n        [\r\n            inputDateFormat,\r\n            fieldInputId,\r\n            autocomplete,\r\n            dynamicFormFieldType,\r\n            max,\r\n            maxLength,\r\n            min,\r\n            options,\r\n            placeholder,\r\n        ],\r\n    );\r\n\r\n    return (\r\n        <div className={`dynamic-form-field ${extraClass || ''}`}>\r\n            {fieldType === DynamicFormFieldType.CHECKBOX ? (\r\n                <CheckboxGroupFormField\r\n                    id={fieldInputId}\r\n                    label={labelComponent}\r\n                    name={fieldName}\r\n                    onChange={onChange}\r\n                    options={(options && options.items) || []}\r\n                />\r\n            ) : (\r\n                <FormField\r\n                    id={fieldInputId}\r\n                    input={renderInput}\r\n                    label={labelComponent}\r\n                    name={fieldName}\r\n                    onChange={onChange}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(DynamicFormField);\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport './Tooltip.scss';\r\n\r\nexport interface TooltipProps {\r\n    children: React.ReactNode;\r\n    testId?: string;\r\n}\r\n\r\nconst Tooltip: FunctionComponent<TooltipProps> = ({ children, testId }) => (\r\n    <span className=\"tooltip tooltip--basic\" data-test={testId}>\r\n        {children}\r\n    </span>\r\n);\r\n\r\nexport default Tooltip;\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconError: FunctionComponent = () => (\r\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconError);\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconSuccess: FunctionComponent = () => (\r\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconSuccess);\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconInfo: FunctionComponent = () => (\r\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconInfo);\r\n","import classNames from 'classnames';\r\nimport React, { FunctionComponent, ReactNode, useId } from 'react';\r\n\r\nimport { IconError, IconInfo, IconSuccess } from '../icon';\r\n\r\nexport interface AlertProps {\r\n    additionalClassName?: string;\r\n    icon?: ReactNode;\r\n    testId?: string;\r\n    type?: AlertType;\r\n    children?: ReactNode;\r\n}\r\n\r\nexport enum AlertType {\r\n    Error = 'error',\r\n    Info = 'info',\r\n    Success = 'success',\r\n    Warning = 'warning',\r\n}\r\n\r\nfunction renderDefaultIcon(type?: AlertType): ReactNode {\r\n    switch (type) {\r\n        case AlertType.Error:\r\n        case AlertType.Warning:\r\n            return <IconError />;\r\n\r\n        case AlertType.Success:\r\n            return <IconSuccess />;\r\n\r\n        case AlertType.Info:\r\n        default:\r\n            return <IconInfo />;\r\n    }\r\n}\r\n\r\nconst Alert: FunctionComponent<AlertProps> = ({\r\n    additionalClassName,\r\n    children,\r\n    icon,\r\n    testId,\r\n    type,\r\n}) => {\r\n    const describedBy = useId();\r\n\r\n    return (\r\n        <div\r\n            aria-describedby={describedBy}\r\n            className={classNames(\r\n                'alertBox',\r\n                additionalClassName,\r\n                { 'alertBox--info': type === AlertType.Info || !type },\r\n                { 'alertBox--error': type === AlertType.Error },\r\n                { 'alertBox--success': type === AlertType.Success },\r\n                { 'alertBox--warning': type === AlertType.Warning },\r\n            )}\r\n            data-test={testId}\r\n        >\r\n            <div className=\"alertBox-column alertBox-icon\">{icon || renderDefaultIcon(type)}</div>\r\n\r\n            <div\r\n                aria-live={type === AlertType.Error ? 'assertive' : 'polite'}\r\n                className=\"alertBox-column alertBox-message\"\r\n                id={describedBy}\r\n                role={type === AlertType.Error ? 'alert' : 'status'}\r\n            >\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Alert;\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, ReactNode, Ref } from 'react';\r\n\r\nimport { Input, InputProps } from '../Input';\r\nimport { Label } from '../Label';\r\n\r\nexport interface CheckboxInputProps extends InputProps {\r\n    additionalClassName?: string;\r\n    label: ReactNode;\r\n    value: string;\r\n    checked: boolean;\r\n}\r\n\r\nconst CheckboxInput = forwardRef(\r\n    (\r\n        { additionalClassName, label, id, ...rest }: CheckboxInputProps,\r\n        ref: Ref<HTMLInputElement>,\r\n    ) => (\r\n        <>\r\n            <Input\r\n                {...rest}\r\n                className={classNames(\r\n                    'form-checkbox',\r\n                    'optimizedCheckout-form-checkbox',\r\n                    additionalClassName,\r\n                )}\r\n                id={id}\r\n                ref={ref}\r\n                type=\"checkbox\"\r\n            />\r\n            <Label htmlFor={id}>{label}</Label>\r\n        </>\r\n    ),\r\n);\r\n\r\nexport default CheckboxInput;\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconChevronDown: FunctionComponent = () => (\r\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconChevronDown);\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\r\n\r\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\r\n    additionalClassName?: string;\r\n    testId?: string;\r\n}\r\n\r\nconst TextArea = forwardRef(\r\n    (\r\n        { additionalClassName, testId, className, ...rest }: TextAreaProps,\r\n        ref: Ref<HTMLTextAreaElement>,\r\n    ) => (\r\n        <textarea\r\n            {...rest}\r\n            className={\r\n                className ||\r\n                classNames('form-input', 'optimizedCheckout-form-input', additionalClassName)\r\n            }\r\n            data-test={testId}\r\n            ref={ref}\r\n        />\r\n    ),\r\n);\r\n\r\nexport default TextArea;\r\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\r\nimport classNames from 'classnames';\r\nimport { isDate, noop } from 'lodash';\r\nimport React, { FunctionComponent, memo, useCallback } from 'react';\r\nimport ReactDatePicker from 'react-datepicker';\r\n\r\nimport { withDate } from '@bigcommerce/checkout/locale';\r\n\r\nimport { IconChevronDown } from '../../icon';\r\nimport { CheckboxInput } from '../CheckboxInput';\r\nimport { InputProps } from '../Input';\r\nimport { RadioInput } from '../RadioInput';\r\nimport { TextArea } from '../TextArea';\r\nimport { TextInput } from '../TextInput';\r\n\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\n\r\nexport interface DynamicInputProps extends InputProps {\r\n    id: string;\r\n    additionalClassName?: string;\r\n    value?: string | string[];\r\n    rows?: number;\r\n    fieldType?: DynamicFormFieldType;\r\n    options?: FormFieldItem[];\r\n    isFloatingLabelEnabled?: boolean;\r\n    inputDateFormat?: string;\r\n    date?: {\r\n        inputFormat: string;\r\n    };\r\n}\r\n\r\nconst DynamicInput: FunctionComponent<DynamicInputProps> = ({\r\n    fieldType,\r\n    id,\r\n    name,\r\n    onChange = noop,\r\n    options,\r\n    placeholder,\r\n    value,\r\n    isFloatingLabelEnabled,\r\n    date,\r\n    inputDateFormat,\r\n    ...rest\r\n}) => {\r\n    const inputFormat = inputDateFormat || date?.inputFormat || '';\r\n\r\n    const handleDateChange = useCallback(\r\n        (dateValue: string, event: any) =>\r\n            onChange({\r\n                ...event,\r\n                target: {\r\n                    name,\r\n                    value: dateValue,\r\n                },\r\n            }),\r\n        [onChange, name],\r\n    );\r\n\r\n    switch (fieldType) {\r\n        case DynamicFormFieldType.DROPDOWM:\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classNames(\r\n                            { 'dropdown-chevron': !isFloatingLabelEnabled },\r\n                            { 'floating-select-chevron': isFloatingLabelEnabled },\r\n                        )}\r\n                    >\r\n                        <IconChevronDown />\r\n                    </div>\r\n                    <select\r\n                        {...(rest as any)}\r\n                        className={classNames(\r\n                            { 'floating-select': isFloatingLabelEnabled },\r\n                            'form-select optimizedCheckout-form-select',\r\n                        )}\r\n                        data-test={`${id}-select`}\r\n                        id={id}\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        value={value ?? ''}\r\n                    >\r\n                        {!!placeholder && <option value=\"\">{placeholder}</option>}\r\n                        {options &&\r\n                            options.map(({ label, value: optionValue }) => (\r\n                                <option key={optionValue} value={optionValue}>\r\n                                    {label}\r\n                                </option>\r\n                            ))}\r\n                    </select>\r\n                </>\r\n            );\r\n\r\n        case DynamicFormFieldType.RADIO:\r\n            if (!options || !options.length) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    {options.map(({ label, value: optionValue }) => (\r\n                        <RadioInput\r\n                            {...rest}\r\n                            checked={optionValue === value}\r\n                            id={`${id}-${optionValue}`}\r\n                            key={optionValue}\r\n                            label={label}\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            testId={`${id}-${optionValue}-radio`}\r\n                            value={optionValue}\r\n                        />\r\n                    ))}\r\n                </>\r\n            );\r\n\r\n        case DynamicFormFieldType.CHECKBOX:\r\n            if (!options || !options.length) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    {options.map(({ label, value: optionValue }) => (\r\n                        <CheckboxInput\r\n                            {...rest}\r\n                            checked={Array.isArray(value) ? value.includes(optionValue) : false}\r\n                            id={`${id}-${optionValue}`}\r\n                            key={optionValue}\r\n                            label={label}\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            testId={`${id}-${optionValue}-checkbox`}\r\n                            value={optionValue}\r\n                        />\r\n                    ))}\r\n                </>\r\n            );\r\n\r\n        case DynamicFormFieldType.DATE:\r\n            return (\r\n                <ReactDatePicker\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    {...(rest as any)}\r\n                    autoComplete=\"off\"\r\n                    // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\r\n                    // https://github.com/Hacker0x01/react-datepicker/issues/1357\r\n                    // onChangeRaw={ rest.onChange }\r\n                    calendarClassName=\"optimizedCheckout-contentPrimary\"\r\n                    className=\"form-input optimizedCheckout-form-input\"\r\n                    dateFormat={inputFormat}\r\n                    maxDate={rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined}\r\n                    minDate={rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined}\r\n                    name={name}\r\n                    onChange={handleDateChange}\r\n                    placeholderText={inputFormat.toUpperCase()}\r\n                    popperClassName=\"optimizedCheckout-contentPrimary\"\r\n                    selected={isDate(value) ? value : undefined}\r\n                />\r\n            );\r\n\r\n        case DynamicFormFieldType.MULTILINE:\r\n            return (\r\n                <TextArea\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    {...(rest as any)}\r\n                    id={id}\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    testId={`${id}-text`}\r\n                    type={fieldType}\r\n                    value={value}\r\n                />\r\n            );\r\n\r\n        default:\r\n            return (\r\n                <TextInput\r\n                    {...rest}\r\n                    id={id}\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    placeholder={placeholder}\r\n                    testId={`${id}-${\r\n                        fieldType === DynamicFormFieldType.PASSWORD ? 'password' : 'text'\r\n                    }`}\r\n                    type={fieldType}\r\n                    value={value}\r\n                />\r\n            );\r\n    }\r\n};\r\n\r\nexport default memo(withDate(DynamicInput));\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\nimport { noop } from 'lodash';\r\nimport React, { ReactNode, useState } from 'react';\r\n\r\nimport AccordionContext from './AccordionContext';\r\n\r\nexport interface AccordionProps {\r\n    children?: ReactNode;\r\n    className?: string;\r\n    defaultSelectedItemId?: string;\r\n    isDisabled?: boolean;\r\n    onSelect?(id: string): void;\r\n}\r\n\r\nconst Accordion = ({\r\n    children,\r\n    className = 'accordion',\r\n    defaultSelectedItemId,\r\n    isDisabled,\r\n    onSelect = noop,\r\n}: AccordionProps) => {\r\n    const [selectedItemId, setSelectedItemId] = useState<string | undefined>(defaultSelectedItemId);\r\n\r\n    const handleToggleItem: (id: string) => void = (id) => {\r\n        if (isDisabled) {\r\n            return;\r\n        }\r\n\r\n        setSelectedItemId(id);\r\n        onSelect(id);\r\n    };\r\n\r\n    const getContextValue = memoizeOne((newSelectedItemId?: string) => {\r\n        return {\r\n            onToggle: handleToggleItem,\r\n            selectedItemId: newSelectedItemId,\r\n        };\r\n    });\r\n\r\n    return (\r\n        <AccordionContext.Provider value={getContextValue(selectedItemId)}>\r\n            <ul className={className}>{children}</ul>\r\n        </AccordionContext.Provider>\r\n    );\r\n};\r\n\r\nexport default Accordion;\r\n","import { noop } from 'lodash';\r\nimport React, {\r\n    createContext,\r\n    FunctionComponent,\r\n    memo,\r\n    ReactNode,\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n} from 'react';\r\n\r\nimport { Accordion } from '@bigcommerce/checkout/ui';\r\n\r\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\r\n\r\nexport interface ChecklistProps {\r\n    children?: ReactNode;\r\n    defaultSelectedItemId?: string;\r\n    isDisabled?: boolean;\r\n    name: string;\r\n    onSelect?(value: string): void;\r\n}\r\n\r\nexport interface ChecklistContextProps {\r\n    name: string;\r\n}\r\n\r\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\r\n\r\nconst Checklist: FunctionComponent<\r\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\r\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\r\n    useEffect(() => {\r\n        return () => {\r\n            setFieldValue(name, '');\r\n        };\r\n    }, []);\r\n\r\n    const handleSelect = useCallback(\r\n        (value: string) => {\r\n            setFieldValue(name, value);\r\n            onSelect(value);\r\n        },\r\n        [name, onSelect, setFieldValue],\r\n    );\r\n\r\n    const contextValue = useMemo(() => ({ name }), [name]);\r\n\r\n    return (\r\n        <ChecklistContext.Provider value={contextValue}>\r\n            <Accordion\r\n                {...props}\r\n                className=\"form-checklist optimizedCheckout-form-checklist\"\r\n                onSelect={handleSelect}\r\n            />\r\n        </ChecklistContext.Provider>\r\n    );\r\n};\r\n\r\nexport default connectFormik(memo(Checklist));\r\n","import { connect } from 'formik';\r\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\r\nimport shallowEqual from 'shallowequal';\r\n\r\nimport ConnectFormikProps from './ConnectFormikProps';\r\n\r\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\r\n    OriginalComponent: ComponentType<TProps>,\r\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\r\n    const InnerComponent: FunctionComponent<TProps> = memo(\r\n        (props) => <OriginalComponent {...props} />,\r\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\r\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\r\n    );\r\n\r\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\r\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\r\n    >;\r\n\r\n    DecoratedComponent.displayName = `ConnectFormik(${\r\n        OriginalComponent.displayName || OriginalComponent.name\r\n    })`;\r\n\r\n    return DecoratedComponent;\r\n}\r\n","import classNames from 'classnames';\r\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\r\n\r\nimport { FormContext } from '../contexts';\r\n\r\nexport interface FormFieldContainerProps {\r\n    additionalClassName?: string;\r\n    children?: ReactNode;\r\n    className?: string;\r\n    hasError?: boolean;\r\n    testId?: string;\r\n}\r\n\r\nconst FormFieldContainer: FunctionComponent<FormFieldContainerProps> = ({\r\n    additionalClassName,\r\n    children,\r\n    className,\r\n    hasError,\r\n    testId,\r\n}) => (\r\n    <FormContext.Consumer>\r\n        {({ isSubmitted }) => (\r\n            <div\r\n                className={\r\n                    className ||\r\n                    classNames('form-field', additionalClassName, {\r\n                        'form-field--error': hasError && isSubmitted,\r\n                    })\r\n                }\r\n                data-test={testId}\r\n            >\r\n                {children}\r\n            </div>\r\n        )}\r\n    </FormContext.Consumer>\r\n);\r\n\r\nexport default memo(FormFieldContainer);\r\n","// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport { Placement } from '@popperjs/core';\r\nimport React, { Component, ReactEventHandler, ReactNode } from 'react';\r\nimport { Manager, Popper, Reference } from 'react-popper';\r\n\r\nexport interface TooltipTriggerProps {\r\n    placement?: Placement;\r\n    tooltip: ReactNode;\r\n    children?: ReactNode;\r\n}\r\n\r\nexport interface TooltipTriggerState {\r\n    shouldShow: boolean;\r\n}\r\n\r\nexport default class TooltipTrigger extends Component<TooltipTriggerProps, TooltipTriggerState> {\r\n    static defaultProps = {\r\n        placement: 'bottom',\r\n    };\r\n\r\n    state: Readonly<TooltipTriggerState> = {\r\n        shouldShow: false,\r\n    };\r\n\r\n    render() {\r\n        const { children, placement, tooltip } = this.props;\r\n        const { shouldShow } = this.state;\r\n\r\n        return (\r\n            <Manager>\r\n                <Reference>\r\n                    {({ ref }) => (\r\n                        <span\r\n                            onBlur={this.handleHide}\r\n                            onFocus={this.handleShow}\r\n                            onMouseEnter={this.handleShow}\r\n                            onMouseLeave={this.handleHide}\r\n                            ref={ref}\r\n                        >\r\n                            {children}\r\n                        </span>\r\n                    )}\r\n                </Reference>\r\n\r\n                <Popper\r\n                    modifiers={[\r\n                        { name: 'hide', enabled: false },\r\n                        { name: 'flip', enabled: false },\r\n                        { name: 'preventOverflow', enabled: false },\r\n                    ]}\r\n                    placement={placement}\r\n                >\r\n                    {({ ref, style }) =>\r\n                        shouldShow && (\r\n                            <div ref={ref} style={style}>\r\n                                {tooltip}\r\n                            </div>\r\n                        )\r\n                    }\r\n                </Popper>\r\n            </Manager>\r\n        );\r\n    }\r\n\r\n    private handleShow: ReactEventHandler<HTMLElement> = () => {\r\n        this.setState({ shouldShow: true });\r\n    };\r\n\r\n    private handleHide: ReactEventHandler<HTMLElement> = () => {\r\n        this.setState({ shouldShow: false });\r\n    };\r\n}\r\n","import { Field, FieldConfig, FieldProps, getIn } from 'formik';\r\nimport { isDate, noop } from 'lodash';\r\nimport React, {\r\n    Component,\r\n    createElement,\r\n    FunctionComponent,\r\n    memo,\r\n    useCallback,\r\n    useMemo,\r\n} from 'react';\r\nimport shallowEqual from 'shallowequal';\r\n\r\nimport { FormFieldContainer } from '../FormFieldContainer';\r\n\r\nexport interface BasicFormFieldProps extends FieldConfig {\r\n    additionalClassName?: string;\r\n    className?: string;\r\n    testId?: string;\r\n    onChange?(value: unknown): void;\r\n}\r\n\r\ntype InnerFieldInputProps = FieldProps &\r\n    Pick<FieldConfig, 'component' | 'render'> & {\r\n        onChange?(value: string): void;\r\n    };\r\n\r\ntype InnerFieldProps = Omit<BasicFormFieldProps, keyof FieldConfig> & InnerFieldInputProps;\r\n\r\nclass InnerFieldInput extends Component<InnerFieldInputProps> {\r\n    componentDidUpdate({ field: prevField }: InnerFieldInputProps) {\r\n        const {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            field: { value },\r\n            onChange = noop,\r\n        } = this.props;\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        const comparableValue = isDate(value) ? value.getTime() : value;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        const comparablePrevValue = isDate(prevField.value)\r\n            ? prevField.value.getTime()\r\n            : prevField.value;\r\n\r\n        if (comparableValue !== comparablePrevValue) {\r\n            onChange(value);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { component = 'input', field, render } = this.props;\r\n\r\n        if (render) {\r\n            return render(this.props);\r\n        }\r\n\r\n        if (typeof component === 'string') {\r\n            return createElement(component, field);\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\r\n        return createElement(component as any, this.props);\r\n    }\r\n}\r\n\r\nconst InnerField: FunctionComponent<InnerFieldProps> = memo(\r\n    ({ additionalClassName, component, field, form, onChange, render, testId }) => {\r\n        const input = useMemo(\r\n            () => (\r\n                <InnerFieldInput\r\n                    component={component}\r\n                    field={field}\r\n                    form={form}\r\n                    meta={form.getFieldMeta(field.name)}\r\n                    onChange={onChange}\r\n                    render={render}\r\n                />\r\n            ),\r\n            [field, form, onChange, component, render],\r\n        );\r\n\r\n        return (\r\n            <FormFieldContainer\r\n                additionalClassName={additionalClassName}\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                hasError={getIn(form.errors, field.name)}\r\n                testId={testId}\r\n            >\r\n                {input}\r\n            </FormFieldContainer>\r\n        );\r\n    },\r\n    (\r\n        { form: prevForm, field: prevField, ...prevProps },\r\n        { form: nextForm, field: nextField, ...nextProps },\r\n    ) =>\r\n        shallowEqual(prevProps, nextProps) &&\r\n        shallowEqual(prevForm, nextForm) &&\r\n        shallowEqual(prevField, nextField),\r\n);\r\n\r\nconst BasicFormField: FunctionComponent<BasicFormFieldProps> = ({\r\n    additionalClassName,\r\n    className,\r\n    component,\r\n    render,\r\n    testId,\r\n    onChange,\r\n    ...rest\r\n}) => {\r\n    const renderInnerField = useCallback(\r\n        (props: FieldProps) => (\r\n            <InnerField\r\n                {...props}\r\n                additionalClassName={additionalClassName}\r\n                className={className}\r\n                component={component}\r\n                onChange={onChange}\r\n                render={render}\r\n                testId={testId}\r\n            />\r\n        ),\r\n        [additionalClassName, className, component, render, testId, onChange],\r\n    );\r\n\r\n    return <Field {...rest}>{renderInnerField}</Field>;\r\n};\r\n\r\nexport default memo(BasicFormField);\r\n"],"names":["children","className","hidden","testId","rest","height","viewBox","width","xmlns","d","forwardRef","ref","additionalClassName","appearFocused","type","memo","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","useContext","AccordionContext","A","onToggle","isSelected","transitionEndListener","useCallback","node","done","addEventListener","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","id","props","Input","checked","Label","htmlFor","isDisabled","value","content","htmlId","kebabCase","label","Checklist","C","name","renderInput","memoizeOne","field","disabled","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","onChange","render","legend","errorId","renderMessage","message","role","Consumer","labelContent","footer","input","renderField","Boolean","createContext","noop","DynamicFormFieldType","onSelectedAll","onSelectedNone","handleSelectAllClick","event","preventDefault","handleSelectNoneClick","TranslatedString","href","onClick","MultiCheckboxFormField","form","values","errors","options","push","remove","handleSelectAll","checkedValues","difference","map","forEach","val","handleSelectNone","handleInputChange","target","indexOf","FormFieldContainer","hasError","length","DynamicInput","fieldType","CHECKBOX","FormFieldError","renderProps","pick","secret","fieldLabel","required","max","min","maxLength","inputDateFormat","parentFieldName","placeholder","inputId","autocomplete","extraClass","fieldInputId","fieldName","labelComponent","useMemo","dynamicFormFieldType","NUMBER","includes","TELEPHONE","PASSWORD","TEXT","autoComplete","undefined","items","helperLabel","rows","FormField","withIconContainer","AlertType","icon","describedBy","useId","Info","Error","Success","Warning","renderDefaultIcon","withDate","isFloatingLabelEnabled","date","inputFormat","handleDateChange","dateValue","DROPDOWM","optionValue","key","RADIO","RadioInput","CheckboxInput","Array","isArray","DATE","calendarClassName","dateFormat","maxDate","Date","minDate","placeholderText","toUpperCase","popperClassName","selected","isDate","MULTILINE","TextInput","defaultSelectedItemId","onSelect","useState","selectedItemId","setSelectedItemId","handleToggleItem","getContextValue","newSelectedItemId","Provider","ChecklistContext","connectFormik","setFieldValue","useEffect","handleSelect","contextValue","OriginalComponent","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","displayName","isSubmitted","state","shouldShow","handleShow","setState","handleHide","this","placement","tooltip","onBlur","onFocus","onMouseEnter","onMouseLeave","modifiers","enabled","style","defaultProps","Component","componentDidUpdate","prevField","getTime","component","createElement","InnerField","InnerFieldInput","meta","getFieldMeta","prevForm","nextForm","nextField","renderInnerField"],"sourceRoot":""}