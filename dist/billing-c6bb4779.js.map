{"version":3,"file":"billing-c6bb4779.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/billing/BillingForm.tsx","webpack://checkout/./packages/core/src/app/billing/getBillingMethodId.ts","webpack://checkout/./packages/core/src/app/billing/Billing.tsx"],"sourcesContent":["import {\r\n    Address,\r\n    CheckoutSelectors,\r\n    Country,\r\n    Customer,\r\n    FormField,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps, withFormik } from 'formik';\r\nimport React, { RefObject, useRef, useState } from 'react';\r\nimport { lazy } from 'yup';\r\n\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\nimport { useStyleContext } from '@bigcommerce/checkout/payment-integration-api';\r\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\r\nimport { AddressFormSkeleton, LoadingOverlay } from '@bigcommerce/checkout/ui';\r\n\r\nimport {\r\n    AddressForm,\r\n    AddressFormValues,\r\n    AddressSelect,\r\n    AddressType,\r\n    getAddressFormFieldsValidationSchema,\r\n    getTranslateAddressError,\r\n    isValidCustomerAddress,\r\n    mapAddressToFormValues,\r\n} from '../address';\r\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\r\nimport { OrderComments } from '../orderComments';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Fieldset, Form } from '../ui/form';\r\n\r\nimport StaticBillingAddress from './StaticBillingAddress';\r\n\r\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\r\n\r\nexport interface BillingFormProps {\r\n    billingAddress?: Address;\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customer: Customer;\r\n    customerMessage: string;\r\n    googleMapsApiKey: string;\r\n    isUpdating: boolean;\r\n    methodId?: string;\r\n    shouldShowOrderComments: boolean;\r\n    isFloatingLabelEnabled?: boolean;\r\n    getFields(countryCode?: string): FormField[];\r\n    onSubmit(values: BillingFormValues): void;\r\n    onUnhandledError(error: Error): void;\r\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n}\r\n\r\nconst BillingForm = ({\r\n    googleMapsApiKey,\r\n    billingAddress,\r\n    countriesWithAutocomplete,\r\n    customer: { addresses, isGuest },\r\n    getFields,\r\n    countries,\r\n    isUpdating,\r\n    setFieldValue,\r\n    shouldShowOrderComments,\r\n    values,\r\n    methodId,\r\n    isFloatingLabelEnabled,\r\n    updateAddress,\r\n    onUnhandledError,\r\n}: BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>) => {\r\n    const [isResettingAddress, setIsResettingAddress] = useState(false);\r\n    const addressFormRef: RefObject<HTMLFieldSetElement> = useRef(null);\r\n    const { isPayPalFastlaneEnabled, paypalFastlaneAddresses } = usePayPalFastlaneAddress();\r\n\r\n    const { newFontStyle } = useStyleContext();\r\n    const shouldRenderStaticAddress = methodId === 'amazonpay';\r\n    const allFormFields = getFields(values.countryCode);\r\n    const customFormFields = allFormFields.filter(({ custom }) => custom);\r\n    const hasCustomFormFields = customFormFields.length > 0;\r\n    const editableFormFields =\r\n        shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\r\n    const billingAddresses = isGuest && isPayPalFastlaneEnabled ? paypalFastlaneAddresses : addresses;\r\n    const hasAddresses = billingAddresses?.length > 0;\r\n    const hasValidCustomerAddress =\r\n        billingAddress &&\r\n        isValidCustomerAddress(\r\n            billingAddress,\r\n            billingAddresses,\r\n            getFields(billingAddress.countryCode),\r\n        );\r\n\r\n    const handleSelectAddress = async (address: Partial<Address>) => {\r\n        setIsResettingAddress(true);\r\n\r\n        try {\r\n            await updateAddress(address);\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(error);\r\n            }\r\n        } finally {\r\n            setIsResettingAddress(false);\r\n        }\r\n    };\r\n\r\n    const handleUseNewAddress = () => {\r\n        handleSelectAddress({});\r\n    };\r\n\r\n    return (\r\n        <Form autoComplete=\"on\">\r\n            {shouldRenderStaticAddress && billingAddress && (\r\n                <div className=\"form-fieldset\">\r\n                    <StaticBillingAddress address={billingAddress} />\r\n                </div>\r\n            )}\r\n\r\n            <Fieldset id=\"checkoutBillingAddress\" ref={addressFormRef}>\r\n                {hasAddresses && !shouldRenderStaticAddress && (\r\n                    <Fieldset id=\"billingAddresses\">\r\n                        <LoadingOverlay isLoading={isResettingAddress}>\r\n                            <AddressSelect\r\n                                addresses={billingAddresses}\r\n                                onSelectAddress={handleSelectAddress}\r\n                                onUseNewAddress={handleUseNewAddress}\r\n                                selectedAddress={\r\n                                    hasValidCustomerAddress ? billingAddress : undefined\r\n                                }\r\n                                type={AddressType.Billing}\r\n                            />\r\n                        </LoadingOverlay>\r\n                    </Fieldset>\r\n                )}\r\n\r\n                {!hasValidCustomerAddress && (\r\n                    <AddressFormSkeleton isLoading={isResettingAddress}>\r\n                        <AddressForm\r\n                            countries={countries}\r\n                            countriesWithAutocomplete={countriesWithAutocomplete}\r\n                            countryCode={values.countryCode}\r\n                            formFields={editableFormFields}\r\n                            googleMapsApiKey={googleMapsApiKey}\r\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                            setFieldValue={setFieldValue}\r\n                            shouldShowSaveAddress={!isGuest}\r\n                        />\r\n                    </AddressFormSkeleton>\r\n                )}\r\n            </Fieldset>\r\n\r\n            {shouldShowOrderComments && <OrderComments />}\r\n\r\n            <div className=\"form-actions\">\r\n                <Button\r\n                    className={newFontStyle ? 'body-bold' : ''}\r\n                    disabled={isUpdating || isResettingAddress}\r\n                    id=\"checkout-billing-continue\"\r\n                    isLoading={isUpdating || isResettingAddress}\r\n                    type=\"submit\"\r\n                    variant={ButtonVariant.Primary}\r\n                >\r\n                    <TranslatedString id=\"common.continue_action\" />\r\n                </Button>\r\n            </div>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default withLanguage(\r\n    withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\r\n        handleSubmit: (values, { props: { onSubmit } }) => {\r\n            onSubmit(values);\r\n        },\r\n        mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => ({\r\n            ...mapAddressToFormValues(\r\n                getFields(billingAddress && billingAddress.countryCode),\r\n                billingAddress,\r\n            ),\r\n            orderComment: customerMessage,\r\n        }),\r\n        isInitialValid: ({ billingAddress, getFields, language }) =>\r\n            !!billingAddress &&\r\n            getAddressFormFieldsValidationSchema({\r\n                language,\r\n                formFields: getFields(billingAddress.countryCode),\r\n            }).isValidSync(billingAddress),\r\n        validationSchema: ({\r\n            language,\r\n            getFields,\r\n            methodId,\r\n        }: BillingFormProps & WithLanguageProps) =>\r\n            methodId === 'amazonpay'\r\n                ? lazy<Partial<AddressFormValues>>((values) =>\r\n                      getCustomFormFieldsValidationSchema({\r\n                          translate: getTranslateAddressError(language),\r\n                          formFields: getFields(values && values.countryCode),\r\n                      }),\r\n                  )\r\n                : lazy<Partial<AddressFormValues>>((values) =>\r\n                      getAddressFormFieldsValidationSchema({\r\n                          language,\r\n                          formFields: getFields(values && values.countryCode),\r\n                      }),\r\n                  ),\r\n        enableReinitialize: true,\r\n    })(BillingForm),\r\n);\r\n","import { Checkout } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { getPreselectedPayment } from '../payment';\r\n\r\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\r\n    const BILLING_METHOD_IDS = ['amazonpay'];\r\n    const preselectedPayment = getPreselectedPayment(checkout);\r\n\r\n    return preselectedPayment && BILLING_METHOD_IDS.includes(preselectedPayment.providerId)\r\n        ? preselectedPayment.providerId\r\n        : undefined;\r\n}\r\n","import {\r\n    Address,\r\n    CheckoutRequestBody,\r\n    CheckoutSelectors,\r\n    Country,\r\n    Customer,\r\n    FormField,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\r\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\r\n\r\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\r\nimport { withCheckout } from '../checkout';\r\nimport { EMPTY_ARRAY, isExperimentEnabled, isFloatingLabelEnabled } from '../common/utility';\r\nimport { getShippableItemsCount } from '../shipping';\r\nimport { Legend } from '../ui/form';\r\n\r\nimport BillingForm, { BillingFormValues } from './BillingForm';\r\nimport getBillingMethodId from './getBillingMethodId';\r\n\r\nexport interface BillingProps {\r\n    navigateNextStep(): void;\r\n    onReady?(): void;\r\n    onUnhandledError(error: Error): void;\r\n}\r\n\r\nexport interface WithCheckoutBillingProps {\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customer: Customer;\r\n    customerMessage: string;\r\n    googleMapsApiKey: string;\r\n    isInitializing: boolean;\r\n    isUpdating: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    billingAddress?: Address;\r\n    methodId?: string;\r\n    isFloatingLabelEnabled?: boolean;\r\n    newFontStyle?: boolean;\r\n    getFields(countryCode?: string): FormField[];\r\n    initialize(): Promise<CheckoutSelectors>;\r\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\r\n}\r\n\r\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\r\n    async componentDidMount(): Promise<void> {\r\n        const { initialize, onReady = noop, onUnhandledError } = this.props;\r\n\r\n        try {\r\n            await initialize();\r\n            onReady();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { updateAddress, isInitializing, newFontStyle, ...props } = this.props;\r\n\r\n        return (\r\n            <AddressFormSkeleton isLoading={isInitializing}>\r\n                <div className=\"checkout-form\">\r\n                    <div className=\"form-legend-container\">\r\n                        <Legend newFontStyle={newFontStyle} testId=\"billing-address-heading\">\r\n                            <TranslatedString id=\"billing.billing_address_heading\" />\r\n                        </Legend>\r\n                    </div>\r\n                    <BillingForm\r\n                        {...props}\r\n                        onSubmit={this.handleSubmit}\r\n                        updateAddress={updateAddress}\r\n                    />\r\n                </div>\r\n            </AddressFormSkeleton>\r\n        );\r\n    }\r\n\r\n    private handleSubmit: (values: BillingFormValues) => void = async ({\r\n        orderComment,\r\n        ...addressValues\r\n    }) => {\r\n        const {\r\n            updateAddress,\r\n            updateCheckout,\r\n            customerMessage,\r\n            billingAddress,\r\n            navigateNextStep,\r\n            onUnhandledError,\r\n        } = this.props;\r\n\r\n        const promises: Array<Promise<CheckoutSelectors>> = [];\r\n        const address = mapAddressFromFormValues(addressValues);\r\n\r\n        if (address && !isEqualAddress(address, billingAddress)) {\r\n            promises.push(updateAddress(address));\r\n        }\r\n\r\n        if (customerMessage !== orderComment) {\r\n            promises.push(updateCheckout({ customerMessage: orderComment }));\r\n        }\r\n\r\n        try {\r\n            await Promise.all(promises);\r\n\r\n            navigateNextStep();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(error);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nfunction mapToBillingProps({\r\n    checkoutService,\r\n    checkoutState,\r\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\r\n    const {\r\n        data: {\r\n            getCheckout,\r\n            getConfig,\r\n            getCart,\r\n            getCustomer,\r\n            getBillingAddress,\r\n            getBillingAddressFields,\r\n            getBillingCountries,\r\n        },\r\n        statuses: { isLoadingBillingCountries, isUpdatingBillingAddress, isUpdatingCheckout },\r\n    } = checkoutState;\r\n\r\n    const config = getConfig();\r\n    const customer = getCustomer();\r\n    const checkout = getCheckout();\r\n    const cart = getCart();\r\n\r\n    if (!config || !customer || !checkout || !cart) {\r\n        return null;\r\n    }\r\n\r\n    const { enableOrderComments, googleMapsApiKey } = config.checkoutSettings;\r\n\r\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\r\n\r\n    return {\r\n        billingAddress: getBillingAddress(),\r\n        countries: getBillingCountries() || EMPTY_ARRAY,\r\n        countriesWithAutocomplete,\r\n        customer,\r\n        customerMessage: checkout.customerMessage,\r\n        getFields: getBillingAddressFields,\r\n        googleMapsApiKey,\r\n        initialize: checkoutService.loadBillingAddressFields,\r\n        isInitializing: isLoadingBillingCountries(),\r\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\r\n        methodId: getBillingMethodId(checkout),\r\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\r\n        updateAddress: checkoutService.updateBillingAddress,\r\n        updateCheckout: checkoutService.updateCheckout,\r\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\r\n        newFontStyle: isExperimentEnabled(config.checkoutSettings, 'CHECKOUT-7962.update_font_style_on_checkout_page')\r\n    };\r\n}\r\n\r\nexport default withCheckout(mapToBillingProps)(Billing);\r\n"],"names":["withLanguage","handleSubmit","values","onSubmit","mapPropsToValues","getFields","customerMessage","billingAddress","mapAddressToFormValues","countryCode","orderComment","isInitialValid","language","getAddressFormFieldsValidationSchema","formFields","isValidSync","validationSchema","getCustomFormFieldsValidationSchema","translate","enableReinitialize","googleMapsApiKey","countriesWithAutocomplete","customer","addresses","isGuest","countries","isUpdating","setFieldValue","shouldShowOrderComments","methodId","isFloatingLabelEnabled","updateAddress","onUnhandledError","useState","isResettingAddress","setIsResettingAddress","addressFormRef","useRef","usePayPalFastlaneAddress","isPayPalFastlaneEnabled","paypalFastlaneAddresses","newFontStyle","shouldRenderStaticAddress","allFormFields","customFormFields","filter","hasCustomFormFields","length","editableFormFields","billingAddresses","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","handleSelectAddress","address","Error","Form","autoComplete","className","StaticBillingAddress","Fieldset","id","ref","LoadingOverlay","isLoading","AddressSelect","A","onSelectAddress","onUseNewAddress","selectedAddress","undefined","type","AddressType","Billing","AddressFormSkeleton","AddressForm","shouldShowSaveAddress","OrderComments","Button","disabled","variant","Primary","TranslatedString","getBillingMethodId","checkout","preselectedPayment","getPreselectedPayment","includes","providerId","addressValues","this","props","updateCheckout","navigateNextStep","promises","mapAddressFromFormValues","isEqualAddress","push","Promise","all","componentDidMount","initialize","onReady","noop","render","isInitializing","Legend","testId","Component","withCheckout","checkoutService","checkoutState","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","cart","checkoutSettings","enableOrderComments","loadBillingAddressFields","getShippableItemsCount","updateBillingAddress","isExperimentEnabled"],"sourceRoot":""}